////----------------------
//// <auto-generated>
////     Generated using the NSwag toolchain v13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
//// </auto-generated>
////----------------------

//#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
//#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
//#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
//#pragma warning disable 612 // Disable "CS0612 '...' is obsolete"
//#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
//#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
//#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
//#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
//#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"

//namespace Common.Presentation.Web.Client
//{
//    using System = global::System;

//    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial interface IApiClient
//    {

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        System.Threading.Tasks.Task<SwaggerResponse<string>> SystemEcho_GetAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        System.Threading.Tasks.Task<SwaggerResponse<SystemInfo>> SystemInfo_GetAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        System.Threading.Tasks.Task<SwaggerResponse<System.Collections.Generic.ICollection<IModule>>> SystemModule_GetAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        System.Threading.Tasks.Task<SwaggerResponse<PagedResultOfBrand>> Brand_GetAllAsync(int? pageNumber = null, int? pageSize = null, string searchString = null, string orderBy = null, bool? includeDeleted = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        System.Threading.Tasks.Task<SwaggerResponse<ResultOfEntityCreatedCommandResult>> Brand_PostAsync(Brand entity, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        System.Threading.Tasks.Task<SwaggerResponse<ResultOfBrand>> Brand_GetByIdAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        System.Threading.Tasks.Task<SwaggerResponse<ResultOfEntityUpdatedCommandResult>> Brand_PutAsync(string id, Brand entity, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        System.Threading.Tasks.Task<SwaggerResponse<ResultOfEntityDeletedCommandResult>> Brand_DeleteAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        System.Threading.Tasks.Task<SwaggerResponse<ResultOfString>> Brand_ExportAsync(string searchString = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        System.Threading.Tasks.Task<SwaggerResponse<ResultOfInteger>> Brand_ImportAsync(UploadRequestModel model, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        System.Threading.Tasks.Task<SwaggerResponse<ResultOfString>> BrandEntity_ExportAsync(string searchString = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        System.Threading.Tasks.Task<SwaggerResponse<ResultOfInteger>> BrandEntity_ImportAsync(UploadRequestModel model, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        System.Threading.Tasks.Task<SwaggerResponse<ResultOfEntityCreatedCommandResult>> BrandEntity_BrandCreateCommandAsync(Brand entity, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        System.Threading.Tasks.Task<SwaggerResponse<PagedResultOfBrand>> BrandEntity_BrandFindAllQueryAsync(int? pageNumber = null, int? pageSize = null, string searchString = null, string orderBy = null, bool? includedeleted = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        System.Threading.Tasks.Task<SwaggerResponse<ResultOfEntityDeletedCommandResult>> BrandEntity_BrandDeleteCommandAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        System.Threading.Tasks.Task<SwaggerResponse<ResultOfEntityUpdatedCommandResult>> BrandEntity_BrandUpdateCommandAsync(string id, Brand entity, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        System.Threading.Tasks.Task<SwaggerResponse<ResultOfBrand>> BrandEntity_BrandFindOneQueryAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        System.Threading.Tasks.Task<SwaggerResponse<Result2>> Catalog_EchoGetAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        System.Threading.Tasks.Task<FileResponse> CatalogOData_GetProductsAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        System.Threading.Tasks.Task<FileResponse> CatalogOData_GetBrandsAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        System.Threading.Tasks.Task<SwaggerResponse<PagedResultOfProduct>> Product_GetAllAsync(int? pageNumber = null, int? pageSize = null, string searchString = null, string orderBy = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        System.Threading.Tasks.Task<SwaggerResponse<ResultOfEntityCreatedCommandResult>> Product_PostAsync(Product entity, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        System.Threading.Tasks.Task<SwaggerResponse<ResultOfProduct>> Product_GetByIdAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        System.Threading.Tasks.Task<SwaggerResponse<ResultOfEntityUpdatedCommandResult>> Product_PutAsync(string id, Product entity, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        System.Threading.Tasks.Task<SwaggerResponse<ResultOfEntityDeletedCommandResult>> Product_DeleteAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        System.Threading.Tasks.Task<SwaggerResponse<ResultOfString>> Product_ExportAsync(string searchString = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        System.Threading.Tasks.Task<SwaggerResponse<ResultOfInteger>> Product_ImportAsync(UploadRequestModel model, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        System.Threading.Tasks.Task<SwaggerResponse<PagedResultOfProductType>> ProductTypes_GetAllAsync(int? pageNumber = null, int? pageSize = null, string searchString = null, string orderBy = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        System.Threading.Tasks.Task<SwaggerResponse<ResultOfEntityCreatedCommandResult>> ProductEntity_ProductCreateCommandAsync(Product entity, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        System.Threading.Tasks.Task<SwaggerResponse<PagedResultOfProduct>> ProductEntity_ProductFindAllQueryAsync(int? pageNumber = null, int? pageSize = null, string searchString = null, string orderBy = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        System.Threading.Tasks.Task<SwaggerResponse<ResultOfEntityDeletedCommandResult>> ProductEntity_ProductDeleteCommandAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        System.Threading.Tasks.Task<SwaggerResponse<ResultOfEntityUpdatedCommandResult>> ProductEntity_ProductUpdateCommandAsync(string id, Product entity, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        System.Threading.Tasks.Task<SwaggerResponse<ResultOfProduct>> ProductEntity_ProductFindOneQueryAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        System.Threading.Tasks.Task<SwaggerResponse<Result3>> Account_UpdateProfileAsync(UpdateProfileRequest model, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        System.Threading.Tasks.Task<SwaggerResponse<Result3>> Account_ChangePasswordAsync(ChangePasswordRequest model, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        System.Threading.Tasks.Task<SwaggerResponse<ResultOfString>> Account_GetProfilePictureAsync(string userId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        System.Threading.Tasks.Task<SwaggerResponse<ResultOfString>> Account_UpdateProfilePictureAsync(UpdateProfilePictureRequest request, string userId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        System.Threading.Tasks.Task<SwaggerResponse<Result3>> Identity_EchoGetAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        System.Threading.Tasks.Task<SwaggerResponse<ResultOfIEnumerableOfRoleClaimResponse>> RoleClaim_GetAllAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        System.Threading.Tasks.Task<SwaggerResponse<ResultOfString>> RoleClaim_PostAsync(RoleClaimRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        System.Threading.Tasks.Task<SwaggerResponse<ResultOfIEnumerableOfRoleClaimResponse>> RoleClaim_GetAllByRoleIdAsync(string roleId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        System.Threading.Tasks.Task<SwaggerResponse<ResultOfString>> RoleClaim_DeleteAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        System.Threading.Tasks.Task<SwaggerResponse<ResultOfIEnumerableOfRoleResponse>> Role_GetAllAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        System.Threading.Tasks.Task<SwaggerResponse<ResultOfString>> Role_PostAsync(RoleRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        System.Threading.Tasks.Task<SwaggerResponse<ResultOfString>> Role_DeleteAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        System.Threading.Tasks.Task<SwaggerResponse<ResultOfPermissionResponse>> Role_GetPermissionsByRoleIdAsync(string roleId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        System.Threading.Tasks.Task<SwaggerResponse<ResultOfString>> Role_UpdateAsync(PermissionRequest model, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        System.Threading.Tasks.Task<SwaggerResponse<ResultOfTokenResponse>> Token_AcquireAsync(TokenRequest model, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        System.Threading.Tasks.Task<SwaggerResponse<ResultOfTokenResponse>> Token_RefreshAsync(RefreshTokenRequest model, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        System.Threading.Tasks.Task<SwaggerResponse<ResultOfIEnumerableOfUserResponse>> User_GetAllAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        System.Threading.Tasks.Task<SwaggerResponse<Result3>> User_RegisterAsync(RegisterRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        System.Threading.Tasks.Task<SwaggerResponse<Result3>> User_DeleteUserAsync(string id = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        System.Threading.Tasks.Task<SwaggerResponse<ResultOfUserResponse>> User_GetByIdAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        System.Threading.Tasks.Task<SwaggerResponse<ResultOfUserRolesResponse>> User_GetRolesAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        System.Threading.Tasks.Task<SwaggerResponse<Result3>> User_UpdateRolesAsync(UpdateUserRolesRequest request, string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        System.Threading.Tasks.Task<SwaggerResponse<ResultOfString>> User_ConfirmEmailAsync(string userId = null, string code = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        System.Threading.Tasks.Task<SwaggerResponse<Result3>> User_ToggleUserStatusAsync(ToggleUserStatusRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        System.Threading.Tasks.Task<SwaggerResponse<Result3>> User_ForgotPasswordAsync(ForgotPasswordRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        System.Threading.Tasks.Task<SwaggerResponse<Result3>> User_ResetPasswordAsync(ResetPasswordRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        System.Threading.Tasks.Task<SwaggerResponse<string>> User_ExportAsync(string searchString = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        System.Threading.Tasks.Task<SwaggerResponse<Result4>> Inventory_EchoGetAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        System.Threading.Tasks.Task<SwaggerResponse<PagedResultOfStock>> Stock_GetAllAsync(int? pageNumber = null, int? pageSize = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        System.Threading.Tasks.Task<SwaggerResponse<ResultOfEntityCreatedCommandResult>> Stock_PostAsync(Stock entity, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        System.Threading.Tasks.Task<SwaggerResponse<ResultOfStock>> Stock_GetByIdAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        System.Threading.Tasks.Task<SwaggerResponse<Result5>> Ordering_EchoGetAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        System.Threading.Tasks.Task<SwaggerResponse<Result6>> Shopping_EchoGetAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        System.Threading.Tasks.Task<SwaggerResponse<ResultOfCartDto>> Shopping_CartGetByIdentityAsync(string identity, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        System.Threading.Tasks.Task<SwaggerResponse<ResultOfCartDto>> Shopping_CartAddItemAsync(string identity, string sku, int? quantity = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        System.Threading.Tasks.Task<FileResponse> Shopping_CartDeleteItemAsync(string identity, string sku, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class ApiClient : IApiClient
//    {
//        private System.Net.Http.HttpClient _httpClient;
//        private System.Lazy<System.Text.Json.JsonSerializerOptions> _settings;

//        public ApiClient(System.Net.Http.HttpClient httpClient)
//        {
//            _httpClient = httpClient;
//            _settings = new System.Lazy<System.Text.Json.JsonSerializerOptions>(CreateSerializerSettings);
//        }

//        private System.Text.Json.JsonSerializerOptions CreateSerializerSettings()
//        {
//            var settings = new System.Text.Json.JsonSerializerOptions();
//            UpdateJsonSerializerSettings(settings);
//            return settings;
//        }

//        public System.Text.Json.JsonSerializerOptions JsonSerializerSettings { get { return _settings.Value; } }

//        partial void UpdateJsonSerializerSettings(System.Text.Json.JsonSerializerOptions settings);

//        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
//        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
//        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task<SwaggerResponse<string>> SystemEcho_GetAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
//        {
//            var urlBuilder_ = new System.Text.StringBuilder();
//            urlBuilder_.Append("api/_system/echo");

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    request_.Method = new System.Net.Http.HttpMethod("GET");
//                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        if (status_ == 200)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<string>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            return new SwaggerResponse<string>(status_, headers_, objectResponse_.Object);
//                        }
//                        else
//                        if (status_ == 500)
//                        {
//                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                            throw new ApiException("A server side error occurred.", status_, responseText_, headers_, null);
//                        }
//                        else
//                        {
//                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task<SwaggerResponse<SystemInfo>> SystemInfo_GetAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
//        {
//            var urlBuilder_ = new System.Text.StringBuilder();
//            urlBuilder_.Append("api/_system/info");

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    request_.Method = new System.Net.Http.HttpMethod("GET");
//                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        if (status_ == 200)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<SystemInfo>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            return new SwaggerResponse<SystemInfo>(status_, headers_, objectResponse_.Object);
//                        }
//                        else
//                        {
//                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task<SwaggerResponse<System.Collections.Generic.ICollection<IModule>>> SystemModule_GetAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
//        {
//            var urlBuilder_ = new System.Text.StringBuilder();
//            urlBuilder_.Append("api/_system/modules");

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    request_.Method = new System.Net.Http.HttpMethod("GET");
//                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        if (status_ == 200)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<IModule>>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            return new SwaggerResponse<System.Collections.Generic.ICollection<IModule>>(status_, headers_, objectResponse_.Object);
//                        }
//                        else
//                        {
//                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task<SwaggerResponse<PagedResultOfBrand>> Brand_GetAllAsync(int? pageNumber = null, int? pageSize = null, string searchString = null, string orderBy = null, bool? includeDeleted = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
//        {
//            var urlBuilder_ = new System.Text.StringBuilder();
//            urlBuilder_.Append("api/catalog/brands?");
//            if (pageNumber != null)
//            {
//                urlBuilder_.Append(System.Uri.EscapeDataString("pageNumber") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pageNumber, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
//            }
//            if (pageSize != null)
//            {
//                urlBuilder_.Append(System.Uri.EscapeDataString("pageSize") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
//            }
//            if (searchString != null)
//            {
//                urlBuilder_.Append(System.Uri.EscapeDataString("searchString") + "=").Append(System.Uri.EscapeDataString(ConvertToString(searchString, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
//            }
//            if (orderBy != null)
//            {
//                urlBuilder_.Append(System.Uri.EscapeDataString("orderBy") + "=").Append(System.Uri.EscapeDataString(ConvertToString(orderBy, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
//            }
//            if (includeDeleted != null)
//            {
//                urlBuilder_.Append(System.Uri.EscapeDataString("includeDeleted") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeDeleted, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
//            }
//            urlBuilder_.Length--;

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    request_.Method = new System.Net.Http.HttpMethod("GET");
//                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        if (status_ == 200)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<PagedResultOfBrand>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            return new SwaggerResponse<PagedResultOfBrand>(status_, headers_, objectResponse_.Object);
//                        }
//                        else
//                        if (status_ == 404)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        if (status_ == 401)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        if (status_ == 500)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        {
//                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task<SwaggerResponse<ResultOfEntityCreatedCommandResult>> Brand_PostAsync(Brand entity, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
//        {
//            if (entity == null)
//                throw new System.ArgumentNullException("entity");

//            var urlBuilder_ = new System.Text.StringBuilder();
//            urlBuilder_.Append("api/catalog/brands");

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    var json_ = System.Text.Json.JsonSerializer.Serialize(entity, _settings.Value);
//                    var content_ = new System.Net.Http.StringContent(json_);
//                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
//                    request_.Content = content_;
//                    request_.Method = new System.Net.Http.HttpMethod("POST");
//                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        if (status_ == 201)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ResultOfEntityCreatedCommandResult>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            return new SwaggerResponse<ResultOfEntityCreatedCommandResult>(status_, headers_, objectResponse_.Object);
//                        }
//                        else
//                        if (status_ == 400)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<ValidationProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        if (status_ == 500)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        {
//                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task<SwaggerResponse<ResultOfBrand>> Brand_GetByIdAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
//        {
//            if (id == null)
//                throw new System.ArgumentNullException("id");

//            var urlBuilder_ = new System.Text.StringBuilder();
//            urlBuilder_.Append("api/catalog/brands/{id}");
//            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    request_.Method = new System.Net.Http.HttpMethod("GET");
//                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        if (status_ == 200)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ResultOfBrand>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            return new SwaggerResponse<ResultOfBrand>(status_, headers_, objectResponse_.Object);
//                        }
//                        else
//                        if (status_ == 404)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        if (status_ == 401)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        if (status_ == 500)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        {
//                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task<SwaggerResponse<ResultOfEntityUpdatedCommandResult>> Brand_PutAsync(string id, Brand entity, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
//        {
//            if (id == null)
//                throw new System.ArgumentNullException("id");

//            if (entity == null)
//                throw new System.ArgumentNullException("entity");

//            var urlBuilder_ = new System.Text.StringBuilder();
//            urlBuilder_.Append("api/catalog/brands/{id}");
//            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    var json_ = System.Text.Json.JsonSerializer.Serialize(entity, _settings.Value);
//                    var content_ = new System.Net.Http.StringContent(json_);
//                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
//                    request_.Content = content_;
//                    request_.Method = new System.Net.Http.HttpMethod("PUT");
//                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        if (status_ == 200)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ResultOfEntityUpdatedCommandResult>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            return new SwaggerResponse<ResultOfEntityUpdatedCommandResult>(status_, headers_, objectResponse_.Object);
//                        }
//                        else
//                        if (status_ == 201)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ResultOfEntityUpdatedCommandResult>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            return new SwaggerResponse<ResultOfEntityUpdatedCommandResult>(status_, headers_, objectResponse_.Object);
//                        }
//                        else
//                        if (status_ == 400)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<ValidationProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        if (status_ == 404)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        if (status_ == 500)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        {
//                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task<SwaggerResponse<ResultOfEntityDeletedCommandResult>> Brand_DeleteAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
//        {
//            if (id == null)
//                throw new System.ArgumentNullException("id");

//            var urlBuilder_ = new System.Text.StringBuilder();
//            urlBuilder_.Append("api/catalog/brands/{id}");
//            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
//                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        if (status_ == 200)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ResultOfEntityDeletedCommandResult>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            return new SwaggerResponse<ResultOfEntityDeletedCommandResult>(status_, headers_, objectResponse_.Object);
//                        }
//                        else
//                        if (status_ == 400)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<ValidationProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        if (status_ == 404)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        if (status_ == 500)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        {
//                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task<SwaggerResponse<ResultOfString>> Brand_ExportAsync(string searchString = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
//        {
//            var urlBuilder_ = new System.Text.StringBuilder();
//            urlBuilder_.Append("api/catalog/brands/export?");
//            if (searchString != null)
//            {
//                urlBuilder_.Append(System.Uri.EscapeDataString("searchString") + "=").Append(System.Uri.EscapeDataString(ConvertToString(searchString, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
//            }
//            urlBuilder_.Length--;

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    request_.Method = new System.Net.Http.HttpMethod("GET");
//                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        if (status_ == 200)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ResultOfString>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            return new SwaggerResponse<ResultOfString>(status_, headers_, objectResponse_.Object);
//                        }
//                        else
//                        if (status_ == 404)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        if (status_ == 401)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        if (status_ == 500)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        {
//                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task<SwaggerResponse<ResultOfInteger>> Brand_ImportAsync(UploadRequestModel model, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
//        {
//            if (model == null)
//                throw new System.ArgumentNullException("model");

//            var urlBuilder_ = new System.Text.StringBuilder();
//            urlBuilder_.Append("api/catalog/brands/import");

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    var json_ = System.Text.Json.JsonSerializer.Serialize(model, _settings.Value);
//                    var content_ = new System.Net.Http.StringContent(json_);
//                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
//                    request_.Content = content_;
//                    request_.Method = new System.Net.Http.HttpMethod("POST");
//                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        if (status_ == 200)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ResultOfInteger>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            return new SwaggerResponse<ResultOfInteger>(status_, headers_, objectResponse_.Object);
//                        }
//                        else
//                        if (status_ == 404)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        if (status_ == 401)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        if (status_ == 500)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        {
//                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task<SwaggerResponse<ResultOfString>> BrandEntity_ExportAsync(string searchString = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
//        {
//            var urlBuilder_ = new System.Text.StringBuilder();
//            urlBuilder_.Append("api/catalog/entities/brands/export?");
//            if (searchString != null)
//            {
//                urlBuilder_.Append(System.Uri.EscapeDataString("searchString") + "=").Append(System.Uri.EscapeDataString(ConvertToString(searchString, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
//            }
//            urlBuilder_.Length--;

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    request_.Method = new System.Net.Http.HttpMethod("GET");
//                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        if (status_ == 200)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ResultOfString>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            return new SwaggerResponse<ResultOfString>(status_, headers_, objectResponse_.Object);
//                        }
//                        else
//                        if (status_ == 404)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        if (status_ == 401)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        if (status_ == 500)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        {
//                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task<SwaggerResponse<ResultOfInteger>> BrandEntity_ImportAsync(UploadRequestModel model, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
//        {
//            if (model == null)
//                throw new System.ArgumentNullException("model");

//            var urlBuilder_ = new System.Text.StringBuilder();
//            urlBuilder_.Append("api/catalog/entities/brands/import");

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    var json_ = System.Text.Json.JsonSerializer.Serialize(model, _settings.Value);
//                    var content_ = new System.Net.Http.StringContent(json_);
//                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
//                    request_.Content = content_;
//                    request_.Method = new System.Net.Http.HttpMethod("POST");
//                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        if (status_ == 200)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ResultOfInteger>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            return new SwaggerResponse<ResultOfInteger>(status_, headers_, objectResponse_.Object);
//                        }
//                        else
//                        if (status_ == 404)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        if (status_ == 401)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        if (status_ == 500)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        {
//                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task<SwaggerResponse<ResultOfEntityCreatedCommandResult>> BrandEntity_BrandCreateCommandAsync(Brand entity, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
//        {
//            if (entity == null)
//                throw new System.ArgumentNullException("entity");

//            var urlBuilder_ = new System.Text.StringBuilder();
//            urlBuilder_.Append("api/catalog/entities/brands");

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    var json_ = System.Text.Json.JsonSerializer.Serialize(entity, _settings.Value);
//                    var content_ = new System.Net.Http.StringContent(json_);
//                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
//                    request_.Content = content_;
//                    request_.Method = new System.Net.Http.HttpMethod("POST");
//                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        if (status_ == 201)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ResultOfEntityCreatedCommandResult>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            return new SwaggerResponse<ResultOfEntityCreatedCommandResult>(status_, headers_, objectResponse_.Object);
//                        }
//                        else
//                        if (status_ == 401)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        if (status_ == 400)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<ValidationProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        if (status_ == 500)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        {
//                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task<SwaggerResponse<PagedResultOfBrand>> BrandEntity_BrandFindAllQueryAsync(int? pageNumber = null, int? pageSize = null, string searchString = null, string orderBy = null, bool? includedeleted = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
//        {
//            var urlBuilder_ = new System.Text.StringBuilder();
//            urlBuilder_.Append("api/catalog/entities/brands?");
//            if (pageNumber != null)
//            {
//                urlBuilder_.Append(System.Uri.EscapeDataString("pageNumber") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pageNumber, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
//            }
//            if (pageSize != null)
//            {
//                urlBuilder_.Append(System.Uri.EscapeDataString("pageSize") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
//            }
//            if (searchString != null)
//            {
//                urlBuilder_.Append(System.Uri.EscapeDataString("searchString") + "=").Append(System.Uri.EscapeDataString(ConvertToString(searchString, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
//            }
//            if (orderBy != null)
//            {
//                urlBuilder_.Append(System.Uri.EscapeDataString("orderBy") + "=").Append(System.Uri.EscapeDataString(ConvertToString(orderBy, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
//            }
//            if (includedeleted != null)
//            {
//                urlBuilder_.Append(System.Uri.EscapeDataString("includedeleted") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includedeleted, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
//            }
//            urlBuilder_.Length--;

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    request_.Method = new System.Net.Http.HttpMethod("GET");
//                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        if (status_ == 200)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<PagedResultOfBrand>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            return new SwaggerResponse<PagedResultOfBrand>(status_, headers_, objectResponse_.Object);
//                        }
//                        else
//                        if (status_ == 404)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        if (status_ == 401)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        if (status_ == 500)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        {
//                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task<SwaggerResponse<ResultOfEntityDeletedCommandResult>> BrandEntity_BrandDeleteCommandAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
//        {
//            if (id == null)
//                throw new System.ArgumentNullException("id");

//            var urlBuilder_ = new System.Text.StringBuilder();
//            urlBuilder_.Append("api/catalog/entities/brands/{id}");
//            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
//                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        if (status_ == 200)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ResultOfEntityDeletedCommandResult>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            return new SwaggerResponse<ResultOfEntityDeletedCommandResult>(status_, headers_, objectResponse_.Object);
//                        }
//                        else
//                        if (status_ == 404)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        if (status_ == 401)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        if (status_ == 400)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<ValidationProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        if (status_ == 500)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        {
//                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task<SwaggerResponse<ResultOfEntityUpdatedCommandResult>> BrandEntity_BrandUpdateCommandAsync(string id, Brand entity, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
//        {
//            if (id == null)
//                throw new System.ArgumentNullException("id");

//            if (entity == null)
//                throw new System.ArgumentNullException("entity");

//            var urlBuilder_ = new System.Text.StringBuilder();
//            urlBuilder_.Append("api/catalog/entities/brands/{id}");
//            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    var json_ = System.Text.Json.JsonSerializer.Serialize(entity, _settings.Value);
//                    var content_ = new System.Net.Http.StringContent(json_);
//                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
//                    request_.Content = content_;
//                    request_.Method = new System.Net.Http.HttpMethod("PUT");
//                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        if (status_ == 200)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ResultOfEntityUpdatedCommandResult>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            return new SwaggerResponse<ResultOfEntityUpdatedCommandResult>(status_, headers_, objectResponse_.Object);
//                        }
//                        else
//                        if (status_ == 404)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        if (status_ == 401)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        if (status_ == 400)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<ValidationProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        if (status_ == 500)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        {
//                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task<SwaggerResponse<ResultOfBrand>> BrandEntity_BrandFindOneQueryAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
//        {
//            if (id == null)
//                throw new System.ArgumentNullException("id");

//            var urlBuilder_ = new System.Text.StringBuilder();
//            urlBuilder_.Append("api/catalog/entities/brands/{id}");
//            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    request_.Method = new System.Net.Http.HttpMethod("GET");
//                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        if (status_ == 200)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ResultOfBrand>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            return new SwaggerResponse<ResultOfBrand>(status_, headers_, objectResponse_.Object);
//                        }
//                        else
//                        if (status_ == 404)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        if (status_ == 401)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        if (status_ == 500)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        {
//                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task<SwaggerResponse<Result2>> Catalog_EchoGetAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
//        {
//            var urlBuilder_ = new System.Text.StringBuilder();
//            urlBuilder_.Append("api/catalog/echo");

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    request_.Method = new System.Net.Http.HttpMethod("GET");
//                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        if (status_ == 200)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<Result2>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            return new SwaggerResponse<Result2>(status_, headers_, objectResponse_.Object);
//                        }
//                        else
//                        {
//                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task<FileResponse> CatalogOData_GetProductsAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
//        {
//            var urlBuilder_ = new System.Text.StringBuilder();
//            urlBuilder_.Append("api/catalog/odata/products");

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    request_.Method = new System.Net.Http.HttpMethod("GET");
//                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/octet-stream"));

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        if (status_ == 200 || status_ == 206)
//                        {
//                            var responseStream_ = response_.Content == null ? System.IO.Stream.Null : await response_.Content.ReadAsStreamAsync().ConfigureAwait(false);
//                            var fileResponse_ = new FileResponse(status_, headers_, responseStream_, null, response_);
//                            disposeClient_ = false; disposeResponse_ = false; // response and client are disposed by FileResponse
//                            return fileResponse_;
//                        }
//                        else
//                        {
//                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task<FileResponse> CatalogOData_GetBrandsAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
//        {
//            var urlBuilder_ = new System.Text.StringBuilder();
//            urlBuilder_.Append("api/catalog/odata/brands");

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    request_.Method = new System.Net.Http.HttpMethod("GET");
//                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/octet-stream"));

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        if (status_ == 200 || status_ == 206)
//                        {
//                            var responseStream_ = response_.Content == null ? System.IO.Stream.Null : await response_.Content.ReadAsStreamAsync().ConfigureAwait(false);
//                            var fileResponse_ = new FileResponse(status_, headers_, responseStream_, null, response_);
//                            disposeClient_ = false; disposeResponse_ = false; // response and client are disposed by FileResponse
//                            return fileResponse_;
//                        }
//                        else
//                        {
//                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task<SwaggerResponse<PagedResultOfProduct>> Product_GetAllAsync(int? pageNumber = null, int? pageSize = null, string searchString = null, string orderBy = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
//        {
//            var urlBuilder_ = new System.Text.StringBuilder();
//            urlBuilder_.Append("api/catalog/products?");
//            if (pageNumber != null)
//            {
//                urlBuilder_.Append(System.Uri.EscapeDataString("pageNumber") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pageNumber, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
//            }
//            if (pageSize != null)
//            {
//                urlBuilder_.Append(System.Uri.EscapeDataString("pageSize") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
//            }
//            if (searchString != null)
//            {
//                urlBuilder_.Append(System.Uri.EscapeDataString("searchString") + "=").Append(System.Uri.EscapeDataString(ConvertToString(searchString, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
//            }
//            if (orderBy != null)
//            {
//                urlBuilder_.Append(System.Uri.EscapeDataString("orderBy") + "=").Append(System.Uri.EscapeDataString(ConvertToString(orderBy, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
//            }
//            urlBuilder_.Length--;

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    request_.Method = new System.Net.Http.HttpMethod("GET");
//                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        if (status_ == 200)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<PagedResultOfProduct>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            return new SwaggerResponse<PagedResultOfProduct>(status_, headers_, objectResponse_.Object);
//                        }
//                        else
//                        if (status_ == 404)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        if (status_ == 401)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        if (status_ == 500)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        {
//                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task<SwaggerResponse<ResultOfEntityCreatedCommandResult>> Product_PostAsync(Product entity, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
//        {
//            if (entity == null)
//                throw new System.ArgumentNullException("entity");

//            var urlBuilder_ = new System.Text.StringBuilder();
//            urlBuilder_.Append("api/catalog/products");

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    var json_ = System.Text.Json.JsonSerializer.Serialize(entity, _settings.Value);
//                    var content_ = new System.Net.Http.StringContent(json_);
//                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
//                    request_.Content = content_;
//                    request_.Method = new System.Net.Http.HttpMethod("POST");
//                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        if (status_ == 201)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ResultOfEntityCreatedCommandResult>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            return new SwaggerResponse<ResultOfEntityCreatedCommandResult>(status_, headers_, objectResponse_.Object);
//                        }
//                        else
//                        if (status_ == 400)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<ValidationProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        if (status_ == 500)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        {
//                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task<SwaggerResponse<ResultOfProduct>> Product_GetByIdAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
//        {
//            if (id == null)
//                throw new System.ArgumentNullException("id");

//            var urlBuilder_ = new System.Text.StringBuilder();
//            urlBuilder_.Append("api/catalog/products/{id}");
//            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    request_.Method = new System.Net.Http.HttpMethod("GET");
//                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        if (status_ == 200)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ResultOfProduct>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            return new SwaggerResponse<ResultOfProduct>(status_, headers_, objectResponse_.Object);
//                        }
//                        else
//                        if (status_ == 404)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        if (status_ == 401)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        if (status_ == 500)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        {
//                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task<SwaggerResponse<ResultOfEntityUpdatedCommandResult>> Product_PutAsync(string id, Product entity, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
//        {
//            if (id == null)
//                throw new System.ArgumentNullException("id");

//            if (entity == null)
//                throw new System.ArgumentNullException("entity");

//            var urlBuilder_ = new System.Text.StringBuilder();
//            urlBuilder_.Append("api/catalog/products/{id}");
//            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    var json_ = System.Text.Json.JsonSerializer.Serialize(entity, _settings.Value);
//                    var content_ = new System.Net.Http.StringContent(json_);
//                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
//                    request_.Content = content_;
//                    request_.Method = new System.Net.Http.HttpMethod("PUT");
//                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        if (status_ == 200)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ResultOfEntityUpdatedCommandResult>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            return new SwaggerResponse<ResultOfEntityUpdatedCommandResult>(status_, headers_, objectResponse_.Object);
//                        }
//                        else
//                        if (status_ == 201)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ResultOfEntityUpdatedCommandResult>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            return new SwaggerResponse<ResultOfEntityUpdatedCommandResult>(status_, headers_, objectResponse_.Object);
//                        }
//                        else
//                        if (status_ == 400)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<ValidationProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        if (status_ == 404)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        if (status_ == 500)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        {
//                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task<SwaggerResponse<ResultOfEntityDeletedCommandResult>> Product_DeleteAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
//        {
//            if (id == null)
//                throw new System.ArgumentNullException("id");

//            var urlBuilder_ = new System.Text.StringBuilder();
//            urlBuilder_.Append("api/catalog/products/{id}");
//            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
//                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        if (status_ == 200)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ResultOfEntityDeletedCommandResult>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            return new SwaggerResponse<ResultOfEntityDeletedCommandResult>(status_, headers_, objectResponse_.Object);
//                        }
//                        else
//                        if (status_ == 400)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<ValidationProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        if (status_ == 404)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        if (status_ == 500)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        {
//                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task<SwaggerResponse<ResultOfString>> Product_ExportAsync(string searchString = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
//        {
//            var urlBuilder_ = new System.Text.StringBuilder();
//            urlBuilder_.Append("api/catalog/products/export?");
//            if (searchString != null)
//            {
//                urlBuilder_.Append(System.Uri.EscapeDataString("searchString") + "=").Append(System.Uri.EscapeDataString(ConvertToString(searchString, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
//            }
//            urlBuilder_.Length--;

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    request_.Method = new System.Net.Http.HttpMethod("GET");
//                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        if (status_ == 200)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ResultOfString>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            return new SwaggerResponse<ResultOfString>(status_, headers_, objectResponse_.Object);
//                        }
//                        else
//                        if (status_ == 404)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        if (status_ == 401)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        if (status_ == 500)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        {
//                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task<SwaggerResponse<ResultOfInteger>> Product_ImportAsync(UploadRequestModel model, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
//        {
//            if (model == null)
//                throw new System.ArgumentNullException("model");

//            var urlBuilder_ = new System.Text.StringBuilder();
//            urlBuilder_.Append("api/catalog/products/import");

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    var json_ = System.Text.Json.JsonSerializer.Serialize(model, _settings.Value);
//                    var content_ = new System.Net.Http.StringContent(json_);
//                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
//                    request_.Content = content_;
//                    request_.Method = new System.Net.Http.HttpMethod("POST");
//                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        if (status_ == 200)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ResultOfInteger>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            return new SwaggerResponse<ResultOfInteger>(status_, headers_, objectResponse_.Object);
//                        }
//                        else
//                        if (status_ == 404)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        if (status_ == 401)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        if (status_ == 500)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        {
//                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task<SwaggerResponse<PagedResultOfProductType>> ProductTypes_GetAllAsync(int? pageNumber = null, int? pageSize = null, string searchString = null, string orderBy = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
//        {
//            var urlBuilder_ = new System.Text.StringBuilder();
//            urlBuilder_.Append("api/catalog/producttypes?");
//            if (pageNumber != null)
//            {
//                urlBuilder_.Append(System.Uri.EscapeDataString("pageNumber") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pageNumber, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
//            }
//            if (pageSize != null)
//            {
//                urlBuilder_.Append(System.Uri.EscapeDataString("pageSize") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
//            }
//            if (searchString != null)
//            {
//                urlBuilder_.Append(System.Uri.EscapeDataString("searchString") + "=").Append(System.Uri.EscapeDataString(ConvertToString(searchString, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
//            }
//            if (orderBy != null)
//            {
//                urlBuilder_.Append(System.Uri.EscapeDataString("orderBy") + "=").Append(System.Uri.EscapeDataString(ConvertToString(orderBy, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
//            }
//            urlBuilder_.Length--;

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    request_.Method = new System.Net.Http.HttpMethod("GET");
//                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        if (status_ == 200)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<PagedResultOfProductType>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            return new SwaggerResponse<PagedResultOfProductType>(status_, headers_, objectResponse_.Object);
//                        }
//                        else
//                        if (status_ == 404)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        if (status_ == 401)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        if (status_ == 500)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        {
//                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task<SwaggerResponse<ResultOfEntityCreatedCommandResult>> ProductEntity_ProductCreateCommandAsync(Product entity, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
//        {
//            if (entity == null)
//                throw new System.ArgumentNullException("entity");

//            var urlBuilder_ = new System.Text.StringBuilder();
//            urlBuilder_.Append("api/entities/products");

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    var json_ = System.Text.Json.JsonSerializer.Serialize(entity, _settings.Value);
//                    var content_ = new System.Net.Http.StringContent(json_);
//                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
//                    request_.Content = content_;
//                    request_.Method = new System.Net.Http.HttpMethod("POST");
//                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        if (status_ == 201)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ResultOfEntityCreatedCommandResult>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            return new SwaggerResponse<ResultOfEntityCreatedCommandResult>(status_, headers_, objectResponse_.Object);
//                        }
//                        else
//                        if (status_ == 401)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        if (status_ == 400)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<ValidationProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        if (status_ == 500)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        {
//                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task<SwaggerResponse<PagedResultOfProduct>> ProductEntity_ProductFindAllQueryAsync(int? pageNumber = null, int? pageSize = null, string searchString = null, string orderBy = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
//        {
//            var urlBuilder_ = new System.Text.StringBuilder();
//            urlBuilder_.Append("api/entities/products?");
//            if (pageNumber != null)
//            {
//                urlBuilder_.Append(System.Uri.EscapeDataString("pageNumber") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pageNumber, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
//            }
//            if (pageSize != null)
//            {
//                urlBuilder_.Append(System.Uri.EscapeDataString("pageSize") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
//            }
//            if (searchString != null)
//            {
//                urlBuilder_.Append(System.Uri.EscapeDataString("searchString") + "=").Append(System.Uri.EscapeDataString(ConvertToString(searchString, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
//            }
//            if (orderBy != null)
//            {
//                urlBuilder_.Append(System.Uri.EscapeDataString("orderBy") + "=").Append(System.Uri.EscapeDataString(ConvertToString(orderBy, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
//            }
//            urlBuilder_.Length--;

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    request_.Method = new System.Net.Http.HttpMethod("GET");
//                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        if (status_ == 200)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<PagedResultOfProduct>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            return new SwaggerResponse<PagedResultOfProduct>(status_, headers_, objectResponse_.Object);
//                        }
//                        else
//                        if (status_ == 404)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        if (status_ == 401)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        if (status_ == 500)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        {
//                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task<SwaggerResponse<ResultOfEntityDeletedCommandResult>> ProductEntity_ProductDeleteCommandAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
//        {
//            if (id == null)
//                throw new System.ArgumentNullException("id");

//            var urlBuilder_ = new System.Text.StringBuilder();
//            urlBuilder_.Append("api/entities/products/{id}");
//            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
//                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        if (status_ == 200)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ResultOfEntityDeletedCommandResult>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            return new SwaggerResponse<ResultOfEntityDeletedCommandResult>(status_, headers_, objectResponse_.Object);
//                        }
//                        else
//                        if (status_ == 404)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        if (status_ == 401)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        if (status_ == 400)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<ValidationProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        if (status_ == 500)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        {
//                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task<SwaggerResponse<ResultOfEntityUpdatedCommandResult>> ProductEntity_ProductUpdateCommandAsync(string id, Product entity, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
//        {
//            if (id == null)
//                throw new System.ArgumentNullException("id");

//            if (entity == null)
//                throw new System.ArgumentNullException("entity");

//            var urlBuilder_ = new System.Text.StringBuilder();
//            urlBuilder_.Append("api/entities/products/{id}");
//            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    var json_ = System.Text.Json.JsonSerializer.Serialize(entity, _settings.Value);
//                    var content_ = new System.Net.Http.StringContent(json_);
//                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
//                    request_.Content = content_;
//                    request_.Method = new System.Net.Http.HttpMethod("PUT");
//                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        if (status_ == 200)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ResultOfEntityUpdatedCommandResult>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            return new SwaggerResponse<ResultOfEntityUpdatedCommandResult>(status_, headers_, objectResponse_.Object);
//                        }
//                        else
//                        if (status_ == 404)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        if (status_ == 401)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        if (status_ == 400)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<ValidationProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        if (status_ == 500)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        {
//                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task<SwaggerResponse<ResultOfProduct>> ProductEntity_ProductFindOneQueryAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
//        {
//            if (id == null)
//                throw new System.ArgumentNullException("id");

//            var urlBuilder_ = new System.Text.StringBuilder();
//            urlBuilder_.Append("api/entities/products/{id}");
//            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    request_.Method = new System.Net.Http.HttpMethod("GET");
//                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        if (status_ == 200)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ResultOfProduct>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            return new SwaggerResponse<ResultOfProduct>(status_, headers_, objectResponse_.Object);
//                        }
//                        else
//                        if (status_ == 404)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        if (status_ == 401)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        if (status_ == 500)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        {
//                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task<SwaggerResponse<Result3>> Account_UpdateProfileAsync(UpdateProfileRequest model, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
//        {
//            if (model == null)
//                throw new System.ArgumentNullException("model");

//            var urlBuilder_ = new System.Text.StringBuilder();
//            urlBuilder_.Append("api/identity/accounts/UpdateProfile");

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    var json_ = System.Text.Json.JsonSerializer.Serialize(model, _settings.Value);
//                    var content_ = new System.Net.Http.StringContent(json_);
//                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
//                    request_.Content = content_;
//                    request_.Method = new System.Net.Http.HttpMethod("PUT");
//                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        if (status_ == 200)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<Result3>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            return new SwaggerResponse<Result3>(status_, headers_, objectResponse_.Object);
//                        }
//                        else
//                        if (status_ == 404)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        if (status_ == 401)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        if (status_ == 500)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        {
//                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task<SwaggerResponse<Result3>> Account_ChangePasswordAsync(ChangePasswordRequest model, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
//        {
//            if (model == null)
//                throw new System.ArgumentNullException("model");

//            var urlBuilder_ = new System.Text.StringBuilder();
//            urlBuilder_.Append("api/identity/accounts/ChangePassword");

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    var json_ = System.Text.Json.JsonSerializer.Serialize(model, _settings.Value);
//                    var content_ = new System.Net.Http.StringContent(json_);
//                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
//                    request_.Content = content_;
//                    request_.Method = new System.Net.Http.HttpMethod("PUT");
//                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        if (status_ == 200)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<Result3>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            return new SwaggerResponse<Result3>(status_, headers_, objectResponse_.Object);
//                        }
//                        else
//                        if (status_ == 404)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        if (status_ == 401)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        if (status_ == 500)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        {
//                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task<SwaggerResponse<ResultOfString>> Account_GetProfilePictureAsync(string userId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
//        {
//            if (userId == null)
//                throw new System.ArgumentNullException("userId");

//            var urlBuilder_ = new System.Text.StringBuilder();
//            urlBuilder_.Append("api/identity/accounts/profile-picture/{userId}");
//            urlBuilder_.Replace("{userId}", System.Uri.EscapeDataString(ConvertToString(userId, System.Globalization.CultureInfo.InvariantCulture)));

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    request_.Method = new System.Net.Http.HttpMethod("GET");
//                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        if (status_ == 200)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ResultOfString>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            return new SwaggerResponse<ResultOfString>(status_, headers_, objectResponse_.Object);
//                        }
//                        else
//                        if (status_ == 404)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        if (status_ == 401)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        if (status_ == 500)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        {
//                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task<SwaggerResponse<ResultOfString>> Account_UpdateProfilePictureAsync(UpdateProfilePictureRequest request, string userId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
//        {
//            if (userId == null)
//                throw new System.ArgumentNullException("userId");

//            if (request == null)
//                throw new System.ArgumentNullException("request");

//            var urlBuilder_ = new System.Text.StringBuilder();
//            urlBuilder_.Append("api/identity/accounts/profile-picture/{userId}");
//            urlBuilder_.Replace("{userId}", System.Uri.EscapeDataString(ConvertToString(userId, System.Globalization.CultureInfo.InvariantCulture)));

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    var json_ = System.Text.Json.JsonSerializer.Serialize(request, _settings.Value);
//                    var content_ = new System.Net.Http.StringContent(json_);
//                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
//                    request_.Content = content_;
//                    request_.Method = new System.Net.Http.HttpMethod("POST");
//                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        if (status_ == 200)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ResultOfString>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            return new SwaggerResponse<ResultOfString>(status_, headers_, objectResponse_.Object);
//                        }
//                        else
//                        if (status_ == 404)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        if (status_ == 401)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        if (status_ == 500)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        {
//                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task<SwaggerResponse<Result3>> Identity_EchoGetAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
//        {
//            var urlBuilder_ = new System.Text.StringBuilder();
//            urlBuilder_.Append("api/identity/echo");

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    request_.Method = new System.Net.Http.HttpMethod("GET");
//                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        if (status_ == 200)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<Result3>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            return new SwaggerResponse<Result3>(status_, headers_, objectResponse_.Object);
//                        }
//                        else
//                        {
//                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task<SwaggerResponse<ResultOfIEnumerableOfRoleClaimResponse>> RoleClaim_GetAllAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
//        {
//            var urlBuilder_ = new System.Text.StringBuilder();
//            urlBuilder_.Append("api/identity/roleclaims");

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    request_.Method = new System.Net.Http.HttpMethod("GET");
//                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        if (status_ == 200)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ResultOfIEnumerableOfRoleClaimResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            return new SwaggerResponse<ResultOfIEnumerableOfRoleClaimResponse>(status_, headers_, objectResponse_.Object);
//                        }
//                        else
//                        if (status_ == 404)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        if (status_ == 401)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        if (status_ == 500)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        {
//                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task<SwaggerResponse<ResultOfString>> RoleClaim_PostAsync(RoleClaimRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
//        {
//            if (request == null)
//                throw new System.ArgumentNullException("request");

//            var urlBuilder_ = new System.Text.StringBuilder();
//            urlBuilder_.Append("api/identity/roleclaims");

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    var json_ = System.Text.Json.JsonSerializer.Serialize(request, _settings.Value);
//                    var content_ = new System.Net.Http.StringContent(json_);
//                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
//                    request_.Content = content_;
//                    request_.Method = new System.Net.Http.HttpMethod("POST");
//                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        if (status_ == 200)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ResultOfString>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            return new SwaggerResponse<ResultOfString>(status_, headers_, objectResponse_.Object);
//                        }
//                        else
//                        if (status_ == 404)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        if (status_ == 401)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        if (status_ == 500)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        {
//                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task<SwaggerResponse<ResultOfIEnumerableOfRoleClaimResponse>> RoleClaim_GetAllByRoleIdAsync(string roleId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
//        {
//            if (roleId == null)
//                throw new System.ArgumentNullException("roleId");

//            var urlBuilder_ = new System.Text.StringBuilder();
//            urlBuilder_.Append("api/identity/roleclaims/{roleId}");
//            urlBuilder_.Replace("{roleId}", System.Uri.EscapeDataString(ConvertToString(roleId, System.Globalization.CultureInfo.InvariantCulture)));

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    request_.Method = new System.Net.Http.HttpMethod("GET");
//                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        if (status_ == 200)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ResultOfIEnumerableOfRoleClaimResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            return new SwaggerResponse<ResultOfIEnumerableOfRoleClaimResponse>(status_, headers_, objectResponse_.Object);
//                        }
//                        else
//                        if (status_ == 404)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        if (status_ == 401)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        if (status_ == 500)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        {
//                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task<SwaggerResponse<ResultOfString>> RoleClaim_DeleteAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
//        {
//            if (id == null)
//                throw new System.ArgumentNullException("id");

//            var urlBuilder_ = new System.Text.StringBuilder();
//            urlBuilder_.Append("api/identity/roleclaims/{id}");
//            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
//                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        if (status_ == 200)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ResultOfString>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            return new SwaggerResponse<ResultOfString>(status_, headers_, objectResponse_.Object);
//                        }
//                        else
//                        if (status_ == 404)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        if (status_ == 401)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        if (status_ == 500)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        {
//                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task<SwaggerResponse<ResultOfIEnumerableOfRoleResponse>> Role_GetAllAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
//        {
//            var urlBuilder_ = new System.Text.StringBuilder();
//            urlBuilder_.Append("api/identity/roles");

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    request_.Method = new System.Net.Http.HttpMethod("GET");
//                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        if (status_ == 200)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ResultOfIEnumerableOfRoleResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            return new SwaggerResponse<ResultOfIEnumerableOfRoleResponse>(status_, headers_, objectResponse_.Object);
//                        }
//                        else
//                        if (status_ == 404)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        if (status_ == 401)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        if (status_ == 500)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        {
//                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task<SwaggerResponse<ResultOfString>> Role_PostAsync(RoleRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
//        {
//            if (request == null)
//                throw new System.ArgumentNullException("request");

//            var urlBuilder_ = new System.Text.StringBuilder();
//            urlBuilder_.Append("api/identity/roles");

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    var json_ = System.Text.Json.JsonSerializer.Serialize(request, _settings.Value);
//                    var content_ = new System.Net.Http.StringContent(json_);
//                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
//                    request_.Content = content_;
//                    request_.Method = new System.Net.Http.HttpMethod("POST");
//                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        if (status_ == 200)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ResultOfString>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            return new SwaggerResponse<ResultOfString>(status_, headers_, objectResponse_.Object);
//                        }
//                        else
//                        if (status_ == 404)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        if (status_ == 401)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        if (status_ == 500)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        {
//                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task<SwaggerResponse<ResultOfString>> Role_DeleteAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
//        {
//            if (id == null)
//                throw new System.ArgumentNullException("id");

//            var urlBuilder_ = new System.Text.StringBuilder();
//            urlBuilder_.Append("api/identity/roles/{id}");
//            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
//                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        if (status_ == 200)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ResultOfString>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            return new SwaggerResponse<ResultOfString>(status_, headers_, objectResponse_.Object);
//                        }
//                        else
//                        if (status_ == 404)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        if (status_ == 401)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        if (status_ == 500)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        {
//                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task<SwaggerResponse<ResultOfPermissionResponse>> Role_GetPermissionsByRoleIdAsync(string roleId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
//        {
//            if (roleId == null)
//                throw new System.ArgumentNullException("roleId");

//            var urlBuilder_ = new System.Text.StringBuilder();
//            urlBuilder_.Append("api/identity/roles/permissions/{roleId}");
//            urlBuilder_.Replace("{roleId}", System.Uri.EscapeDataString(ConvertToString(roleId, System.Globalization.CultureInfo.InvariantCulture)));

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    request_.Method = new System.Net.Http.HttpMethod("GET");
//                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        if (status_ == 200)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ResultOfPermissionResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            return new SwaggerResponse<ResultOfPermissionResponse>(status_, headers_, objectResponse_.Object);
//                        }
//                        else
//                        if (status_ == 404)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        if (status_ == 401)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        if (status_ == 500)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        {
//                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task<SwaggerResponse<ResultOfString>> Role_UpdateAsync(PermissionRequest model, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
//        {
//            if (model == null)
//                throw new System.ArgumentNullException("model");

//            var urlBuilder_ = new System.Text.StringBuilder();
//            urlBuilder_.Append("api/identity/roles/permissions/update");

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    var json_ = System.Text.Json.JsonSerializer.Serialize(model, _settings.Value);
//                    var content_ = new System.Net.Http.StringContent(json_);
//                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
//                    request_.Content = content_;
//                    request_.Method = new System.Net.Http.HttpMethod("PUT");
//                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        if (status_ == 200)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ResultOfString>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            return new SwaggerResponse<ResultOfString>(status_, headers_, objectResponse_.Object);
//                        }
//                        else
//                        if (status_ == 404)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        if (status_ == 401)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        if (status_ == 500)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        {
//                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task<SwaggerResponse<ResultOfTokenResponse>> Token_AcquireAsync(TokenRequest model, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
//        {
//            if (model == null)
//                throw new System.ArgumentNullException("model");

//            var urlBuilder_ = new System.Text.StringBuilder();
//            urlBuilder_.Append("api/identity/token");

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    var json_ = System.Text.Json.JsonSerializer.Serialize(model, _settings.Value);
//                    var content_ = new System.Net.Http.StringContent(json_);
//                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
//                    request_.Content = content_;
//                    request_.Method = new System.Net.Http.HttpMethod("POST");
//                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        if (status_ == 200)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ResultOfTokenResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            return new SwaggerResponse<ResultOfTokenResponse>(status_, headers_, objectResponse_.Object);
//                        }
//                        else
//                        if (status_ == 404)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        if (status_ == 500)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        {
//                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task<SwaggerResponse<ResultOfTokenResponse>> Token_RefreshAsync(RefreshTokenRequest model, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
//        {
//            if (model == null)
//                throw new System.ArgumentNullException("model");

//            var urlBuilder_ = new System.Text.StringBuilder();
//            urlBuilder_.Append("api/identity/token/refresh");

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    var json_ = System.Text.Json.JsonSerializer.Serialize(model, _settings.Value);
//                    var content_ = new System.Net.Http.StringContent(json_);
//                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
//                    request_.Content = content_;
//                    request_.Method = new System.Net.Http.HttpMethod("POST");
//                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        if (status_ == 200)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ResultOfTokenResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            return new SwaggerResponse<ResultOfTokenResponse>(status_, headers_, objectResponse_.Object);
//                        }
//                        else
//                        if (status_ == 404)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        if (status_ == 500)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        {
//                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task<SwaggerResponse<ResultOfIEnumerableOfUserResponse>> User_GetAllAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
//        {
//            var urlBuilder_ = new System.Text.StringBuilder();
//            urlBuilder_.Append("api/identity/users");

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    request_.Method = new System.Net.Http.HttpMethod("GET");
//                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        if (status_ == 200)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ResultOfIEnumerableOfUserResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            return new SwaggerResponse<ResultOfIEnumerableOfUserResponse>(status_, headers_, objectResponse_.Object);
//                        }
//                        else
//                        if (status_ == 404)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        if (status_ == 401)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        if (status_ == 500)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        {
//                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task<SwaggerResponse<Result3>> User_RegisterAsync(RegisterRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
//        {
//            if (request == null)
//                throw new System.ArgumentNullException("request");

//            var urlBuilder_ = new System.Text.StringBuilder();
//            urlBuilder_.Append("api/identity/users");

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    var json_ = System.Text.Json.JsonSerializer.Serialize(request, _settings.Value);
//                    var content_ = new System.Net.Http.StringContent(json_);
//                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
//                    request_.Content = content_;
//                    request_.Method = new System.Net.Http.HttpMethod("POST");
//                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        if (status_ == 200)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<Result3>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            return new SwaggerResponse<Result3>(status_, headers_, objectResponse_.Object);
//                        }
//                        else
//                        if (status_ == 404)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        if (status_ == 500)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        {
//                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task<SwaggerResponse<Result3>> User_DeleteUserAsync(string id = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
//        {
//            var urlBuilder_ = new System.Text.StringBuilder();
//            urlBuilder_.Append("api/identity/users?");
//            if (id != null)
//            {
//                urlBuilder_.Append(System.Uri.EscapeDataString("id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
//            }
//            urlBuilder_.Length--;

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
//                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        if (status_ == 200)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<Result3>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            return new SwaggerResponse<Result3>(status_, headers_, objectResponse_.Object);
//                        }
//                        else
//                        if (status_ == 404)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        if (status_ == 401)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        if (status_ == 500)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        {
//                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task<SwaggerResponse<ResultOfUserResponse>> User_GetByIdAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
//        {
//            if (id == null)
//                throw new System.ArgumentNullException("id");

//            var urlBuilder_ = new System.Text.StringBuilder();
//            urlBuilder_.Append("api/identity/users/{id}");
//            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    request_.Method = new System.Net.Http.HttpMethod("GET");
//                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        if (status_ == 200)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ResultOfUserResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            return new SwaggerResponse<ResultOfUserResponse>(status_, headers_, objectResponse_.Object);
//                        }
//                        else
//                        if (status_ == 404)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        if (status_ == 401)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        if (status_ == 500)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        {
//                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task<SwaggerResponse<ResultOfUserRolesResponse>> User_GetRolesAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
//        {
//            if (id == null)
//                throw new System.ArgumentNullException("id");

//            var urlBuilder_ = new System.Text.StringBuilder();
//            urlBuilder_.Append("api/identity/users/roles/{id}");
//            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    request_.Method = new System.Net.Http.HttpMethod("GET");
//                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        if (status_ == 200)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ResultOfUserRolesResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            return new SwaggerResponse<ResultOfUserRolesResponse>(status_, headers_, objectResponse_.Object);
//                        }
//                        else
//                        if (status_ == 404)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        if (status_ == 401)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        if (status_ == 500)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        {
//                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task<SwaggerResponse<Result3>> User_UpdateRolesAsync(UpdateUserRolesRequest request, string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
//        {
//            if (id == null)
//                throw new System.ArgumentNullException("id");

//            if (request == null)
//                throw new System.ArgumentNullException("request");

//            var urlBuilder_ = new System.Text.StringBuilder();
//            urlBuilder_.Append("api/identity/users/roles/{id}");
//            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    var json_ = System.Text.Json.JsonSerializer.Serialize(request, _settings.Value);
//                    var content_ = new System.Net.Http.StringContent(json_);
//                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
//                    request_.Content = content_;
//                    request_.Method = new System.Net.Http.HttpMethod("PUT");
//                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        if (status_ == 200)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<Result3>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            return new SwaggerResponse<Result3>(status_, headers_, objectResponse_.Object);
//                        }
//                        else
//                        if (status_ == 404)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        if (status_ == 401)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        if (status_ == 500)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        {
//                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task<SwaggerResponse<ResultOfString>> User_ConfirmEmailAsync(string userId = null, string code = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
//        {
//            var urlBuilder_ = new System.Text.StringBuilder();
//            urlBuilder_.Append("api/identity/users/confirm-email?");
//            if (userId != null)
//            {
//                urlBuilder_.Append(System.Uri.EscapeDataString("userId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(userId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
//            }
//            if (code != null)
//            {
//                urlBuilder_.Append(System.Uri.EscapeDataString("code") + "=").Append(System.Uri.EscapeDataString(ConvertToString(code, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
//            }
//            urlBuilder_.Length--;

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    request_.Method = new System.Net.Http.HttpMethod("GET");
//                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        if (status_ == 200)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ResultOfString>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            return new SwaggerResponse<ResultOfString>(status_, headers_, objectResponse_.Object);
//                        }
//                        else
//                        if (status_ == 404)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        if (status_ == 500)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        {
//                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task<SwaggerResponse<Result3>> User_ToggleUserStatusAsync(ToggleUserStatusRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
//        {
//            if (request == null)
//                throw new System.ArgumentNullException("request");

//            var urlBuilder_ = new System.Text.StringBuilder();
//            urlBuilder_.Append("api/identity/users/toggle-status");

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    var json_ = System.Text.Json.JsonSerializer.Serialize(request, _settings.Value);
//                    var content_ = new System.Net.Http.StringContent(json_);
//                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
//                    request_.Content = content_;
//                    request_.Method = new System.Net.Http.HttpMethod("POST");
//                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        if (status_ == 200)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<Result3>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            return new SwaggerResponse<Result3>(status_, headers_, objectResponse_.Object);
//                        }
//                        else
//                        if (status_ == 404)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        if (status_ == 401)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        if (status_ == 500)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        {
//                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task<SwaggerResponse<Result3>> User_ForgotPasswordAsync(ForgotPasswordRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
//        {
//            if (request == null)
//                throw new System.ArgumentNullException("request");

//            var urlBuilder_ = new System.Text.StringBuilder();
//            urlBuilder_.Append("api/identity/users/forgot-password");

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    var json_ = System.Text.Json.JsonSerializer.Serialize(request, _settings.Value);
//                    var content_ = new System.Net.Http.StringContent(json_);
//                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
//                    request_.Content = content_;
//                    request_.Method = new System.Net.Http.HttpMethod("POST");
//                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        if (status_ == 200)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<Result3>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            return new SwaggerResponse<Result3>(status_, headers_, objectResponse_.Object);
//                        }
//                        else
//                        if (status_ == 404)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        if (status_ == 500)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        {
//                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task<SwaggerResponse<Result3>> User_ResetPasswordAsync(ResetPasswordRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
//        {
//            if (request == null)
//                throw new System.ArgumentNullException("request");

//            var urlBuilder_ = new System.Text.StringBuilder();
//            urlBuilder_.Append("api/identity/users/reset-password");

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    var json_ = System.Text.Json.JsonSerializer.Serialize(request, _settings.Value);
//                    var content_ = new System.Net.Http.StringContent(json_);
//                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
//                    request_.Content = content_;
//                    request_.Method = new System.Net.Http.HttpMethod("POST");
//                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        if (status_ == 200)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<Result3>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            return new SwaggerResponse<Result3>(status_, headers_, objectResponse_.Object);
//                        }
//                        else
//                        if (status_ == 404)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        if (status_ == 500)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        {
//                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task<SwaggerResponse<string>> User_ExportAsync(string searchString = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
//        {
//            var urlBuilder_ = new System.Text.StringBuilder();
//            urlBuilder_.Append("api/identity/users/export?");
//            if (searchString != null)
//            {
//                urlBuilder_.Append(System.Uri.EscapeDataString("searchString") + "=").Append(System.Uri.EscapeDataString(ConvertToString(searchString, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
//            }
//            urlBuilder_.Length--;

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    request_.Method = new System.Net.Http.HttpMethod("GET");
//                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        if (status_ == 200)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<string>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            return new SwaggerResponse<string>(status_, headers_, objectResponse_.Object);
//                        }
//                        else
//                        if (status_ == 404)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        if (status_ == 401)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        if (status_ == 500)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        {
//                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task<SwaggerResponse<Result4>> Inventory_EchoGetAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
//        {
//            var urlBuilder_ = new System.Text.StringBuilder();
//            urlBuilder_.Append("api/inventory/echo");

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    request_.Method = new System.Net.Http.HttpMethod("GET");
//                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        if (status_ == 200)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<Result4>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            return new SwaggerResponse<Result4>(status_, headers_, objectResponse_.Object);
//                        }
//                        else
//                        {
//                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task<SwaggerResponse<PagedResultOfStock>> Stock_GetAllAsync(int? pageNumber = null, int? pageSize = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
//        {
//            var urlBuilder_ = new System.Text.StringBuilder();
//            urlBuilder_.Append("api/inventory/stocks?");
//            if (pageNumber != null)
//            {
//                urlBuilder_.Append(System.Uri.EscapeDataString("pageNumber") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pageNumber, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
//            }
//            if (pageSize != null)
//            {
//                urlBuilder_.Append(System.Uri.EscapeDataString("pageSize") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
//            }
//            urlBuilder_.Length--;

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    request_.Method = new System.Net.Http.HttpMethod("GET");
//                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        if (status_ == 200)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<PagedResultOfStock>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            return new SwaggerResponse<PagedResultOfStock>(status_, headers_, objectResponse_.Object);
//                        }
//                        else
//                        if (status_ == 404)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        if (status_ == 401)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        if (status_ == 500)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        {
//                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task<SwaggerResponse<ResultOfEntityCreatedCommandResult>> Stock_PostAsync(Stock entity, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
//        {
//            if (entity == null)
//                throw new System.ArgumentNullException("entity");

//            var urlBuilder_ = new System.Text.StringBuilder();
//            urlBuilder_.Append("api/inventory/stocks");

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    var json_ = System.Text.Json.JsonSerializer.Serialize(entity, _settings.Value);
//                    var content_ = new System.Net.Http.StringContent(json_);
//                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
//                    request_.Content = content_;
//                    request_.Method = new System.Net.Http.HttpMethod("POST");
//                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        if (status_ == 200)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ResultOfEntityCreatedCommandResult>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            return new SwaggerResponse<ResultOfEntityCreatedCommandResult>(status_, headers_, objectResponse_.Object);
//                        }
//                        else
//                        if (status_ == 201)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ResultOfEntityCreatedCommandResult>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            return new SwaggerResponse<ResultOfEntityCreatedCommandResult>(status_, headers_, objectResponse_.Object);
//                        }
//                        else
//                        if (status_ == 400)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<ValidationProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        if (status_ == 500)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        {
//                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task<SwaggerResponse<ResultOfStock>> Stock_GetByIdAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
//        {
//            if (id == null)
//                throw new System.ArgumentNullException("id");

//            var urlBuilder_ = new System.Text.StringBuilder();
//            urlBuilder_.Append("api/inventory/stocks/{id}");
//            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    request_.Method = new System.Net.Http.HttpMethod("GET");
//                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        if (status_ == 200)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ResultOfStock>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            return new SwaggerResponse<ResultOfStock>(status_, headers_, objectResponse_.Object);
//                        }
//                        else
//                        if (status_ == 404)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        if (status_ == 401)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        if (status_ == 500)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        {
//                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task<SwaggerResponse<Result5>> Ordering_EchoGetAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
//        {
//            var urlBuilder_ = new System.Text.StringBuilder();
//            urlBuilder_.Append("api/ordering/echo");

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    request_.Method = new System.Net.Http.HttpMethod("GET");
//                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        if (status_ == 200)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<Result5>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            return new SwaggerResponse<Result5>(status_, headers_, objectResponse_.Object);
//                        }
//                        else
//                        {
//                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task<SwaggerResponse<Result6>> Shopping_EchoGetAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
//        {
//            var urlBuilder_ = new System.Text.StringBuilder();
//            urlBuilder_.Append("api/shopping/echo");

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    request_.Method = new System.Net.Http.HttpMethod("GET");
//                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        if (status_ == 200)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<Result6>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            return new SwaggerResponse<Result6>(status_, headers_, objectResponse_.Object);
//                        }
//                        else
//                        {
//                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task<SwaggerResponse<ResultOfCartDto>> Shopping_CartGetByIdentityAsync(string identity, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
//        {
//            if (identity == null)
//                throw new System.ArgumentNullException("identity");

//            var urlBuilder_ = new System.Text.StringBuilder();
//            urlBuilder_.Append("api/shopping/carts/{identity}");
//            urlBuilder_.Replace("{identity}", System.Uri.EscapeDataString(ConvertToString(identity, System.Globalization.CultureInfo.InvariantCulture)));

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    request_.Method = new System.Net.Http.HttpMethod("GET");
//                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        if (status_ == 200)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ResultOfCartDto>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            return new SwaggerResponse<ResultOfCartDto>(status_, headers_, objectResponse_.Object);
//                        }
//                        else
//                        {
//                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task<SwaggerResponse<ResultOfCartDto>> Shopping_CartAddItemAsync(string identity, string sku, int? quantity = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
//        {
//            if (identity == null)
//                throw new System.ArgumentNullException("identity");

//            if (sku == null)
//                throw new System.ArgumentNullException("sku");

//            var urlBuilder_ = new System.Text.StringBuilder();
//            urlBuilder_.Append("api/shopping/carts/{identity}/items/{sku}?");
//            urlBuilder_.Replace("{identity}", System.Uri.EscapeDataString(ConvertToString(identity, System.Globalization.CultureInfo.InvariantCulture)));
//            urlBuilder_.Replace("{sku}", System.Uri.EscapeDataString(ConvertToString(sku, System.Globalization.CultureInfo.InvariantCulture)));
//            if (quantity != null)
//            {
//                urlBuilder_.Append(System.Uri.EscapeDataString("quantity") + "=").Append(System.Uri.EscapeDataString(ConvertToString(quantity, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
//            }
//            urlBuilder_.Length--;

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
//                    request_.Method = new System.Net.Http.HttpMethod("PUT");
//                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        if (status_ == 200)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ResultOfCartDto>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            return new SwaggerResponse<ResultOfCartDto>(status_, headers_, objectResponse_.Object);
//                        }
//                        else
//                        {
//                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task<FileResponse> Shopping_CartDeleteItemAsync(string identity, string sku, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
//        {
//            if (identity == null)
//                throw new System.ArgumentNullException("identity");

//            if (sku == null)
//                throw new System.ArgumentNullException("sku");

//            var urlBuilder_ = new System.Text.StringBuilder();
//            urlBuilder_.Append("api/shopping/carts/{identity}/items/{sku}");
//            urlBuilder_.Replace("{identity}", System.Uri.EscapeDataString(ConvertToString(identity, System.Globalization.CultureInfo.InvariantCulture)));
//            urlBuilder_.Replace("{sku}", System.Uri.EscapeDataString(ConvertToString(sku, System.Globalization.CultureInfo.InvariantCulture)));

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
//                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/octet-stream"));

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        if (status_ == 200 || status_ == 206)
//                        {
//                            var responseStream_ = response_.Content == null ? System.IO.Stream.Null : await response_.Content.ReadAsStreamAsync().ConfigureAwait(false);
//                            var fileResponse_ = new FileResponse(status_, headers_, responseStream_, null, response_);
//                            disposeClient_ = false; disposeResponse_ = false; // response and client are disposed by FileResponse
//                            return fileResponse_;
//                        }
//                        else
//                        {
//                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        protected struct ObjectResponseResult<T>
//        {
//            public ObjectResponseResult(T responseObject, string responseText)
//            {
//                this.Object = responseObject;
//                this.Text = responseText;
//            }

//            public T Object { get; }

//            public string Text { get; }
//        }

//        public bool ReadResponseAsString { get; set; }

//        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
//        {
//            if (response == null || response.Content == null)
//            {
//                return new ObjectResponseResult<T>(default(T), string.Empty);
//            }

//            if (ReadResponseAsString)
//            {
//                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
//                try
//                {
//                    var typedBody = System.Text.Json.JsonSerializer.Deserialize<T>(responseText, JsonSerializerSettings);
//                    return new ObjectResponseResult<T>(typedBody, responseText);
//                }
//                catch (System.Text.Json.JsonException exception)
//                {
//                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
//                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
//                }
//            }
//            else
//            {
//                try
//                {
//                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
//                    {
//                        var typedBody = await System.Text.Json.JsonSerializer.DeserializeAsync<T>(responseStream, JsonSerializerSettings, cancellationToken).ConfigureAwait(false);
//                        return new ObjectResponseResult<T>(typedBody, string.Empty);
//                    }
//                }
//                catch (System.Text.Json.JsonException exception)
//                {
//                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
//                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
//                }
//            }
//        }

//        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
//        {
//            if (value == null)
//            {
//                return "";
//            }

//            if (value is System.Enum)
//            {
//                var name = System.Enum.GetName(value.GetType(), value);
//                if (name != null)
//                {
//                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
//                    if (field != null)
//                    {
//                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
//                            as System.Runtime.Serialization.EnumMemberAttribute;
//                        if (attribute != null)
//                        {
//                            return attribute.Value != null ? attribute.Value : name;
//                        }
//                    }

//                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
//                    return converted == null ? string.Empty : converted;
//                }
//            }
//            else if (value is bool) 
//            {
//                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
//            }
//            else if (value is byte[])
//            {
//                return System.Convert.ToBase64String((byte[]) value);
//            }
//            else if (value.GetType().IsArray)
//            {
//                var array = System.Linq.Enumerable.OfType<object>((System.Array) value);
//                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
//            }

//            var result = System.Convert.ToString(value, cultureInfo);
//            return result == null ? "" : result;
//        }
//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class SystemInfo
//    {

//        [System.Text.Json.Serialization.JsonPropertyName("request")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
//        public System.Collections.Generic.IDictionary<string, object> Request { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("runtime")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
//        public System.Collections.Generic.IDictionary<string, string> Runtime { get; set; }

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
//    public abstract partial class IModule
//    {

//        [System.Text.Json.Serialization.JsonPropertyName("enabled")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
//        public bool Enabled { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("name")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
//        public string Name { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("priority")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
//        public int Priority { get; set; }

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class PagedResultOfBrand : ResultOfIEnumerableOfBrand
//    {

//        [System.Text.Json.Serialization.JsonPropertyName("currentPage")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
//        public int CurrentPage { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("totalPages")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
//        public int TotalPages { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("totalCount")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
//        public long TotalCount { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("pageSize")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
//        public int PageSize { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("hasPreviousPage")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
//        public bool HasPreviousPage { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("hasNextPage")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
//        public bool HasNextPage { get; set; }

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class ResultOfIEnumerableOfBrand : Result
//    {

//        [System.Text.Json.Serialization.JsonPropertyName("value")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
//        public System.Collections.Generic.ICollection<Brand> Value { get; set; }

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class Brand : AggregateRootOfGuid
//    {

//        [System.Text.Json.Serialization.JsonPropertyName("name")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
//        public string Name { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("description")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
//        public string Description { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("keywords")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
//        public System.Collections.Generic.ICollection<string> Keywords { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("pictureSvg")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
//        public string PictureSvg { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("pictureFileName")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
//        public string PictureFileName { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("pictureUri")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
//        public string PictureUri { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("auditState")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
//        public AuditState AuditState { get; set; }

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class AuditState
//    {

//        [System.Text.Json.Serialization.JsonPropertyName("createdBy")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
//        public string CreatedBy { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("createdDate")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
//        public System.DateTimeOffset CreatedDate { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("createdDescription")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
//        public string CreatedDescription { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("updatedBy")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
//        public string UpdatedBy { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("updatedDate")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
//        public System.DateTimeOffset? UpdatedDate { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("updatedDescription")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
//        public string UpdatedDescription { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("updatedReasons")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
//        public System.Collections.Generic.ICollection<string> UpdatedReasons { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("deactivated")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
//        public bool? Deactivated { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("deactivatedReasons")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
//        public System.Collections.Generic.ICollection<string> DeactivatedReasons { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("deactivatedBy")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
//        public string DeactivatedBy { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("deactivatedDate")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
//        public System.DateTimeOffset? DeactivatedDate { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("deactivatedDescription")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
//        public string DeactivatedDescription { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("deleted")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
//        public bool? Deleted { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("deletedBy")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
//        public string DeletedBy { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("deletedDate")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
//        public System.DateTimeOffset? DeletedDate { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("deletedReason")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
//        public string DeletedReason { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("deletedDescription")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
//        public string DeletedDescription { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("lastActionDate")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
//        public System.DateTimeOffset? LastActionDate { get; set; }

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
//    public abstract partial class AggregateRootOfGuid : EntityOfGuid
//    {

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
//    public abstract partial class EntityOfGuid
//    {

//        [System.Text.Json.Serialization.JsonPropertyName("id")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
//        public System.Guid Id { get; set; }

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class Result
//    {

//        [System.Text.Json.Serialization.JsonPropertyName("messages")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
//        public System.Collections.Generic.ICollection<string> Messages { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("errors")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
//        public System.Collections.Generic.ICollection<IResultError> Errors { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("isSuccess")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
//        public bool IsSuccess { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("isFailure")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
//        public bool IsFailure { get; set; }

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
//    public abstract partial class IResultError
//    {

//        [System.Text.Json.Serialization.JsonPropertyName("message")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
//        public string Message { get; set; }

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class ProblemDetails
//    {

//        [System.Text.Json.Serialization.JsonPropertyName("type")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
//        public string Type { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("title")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
//        public string Title { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("status")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
//        public int? Status { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("detail")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
//        public string Detail { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("instance")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
//        public string Instance { get; set; }

//        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

//        [System.Text.Json.Serialization.JsonExtensionData]
//        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
//        {
//            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
//            set { _additionalProperties = value; }
//        }

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class ResultOfBrand : Result
//    {

//        [System.Text.Json.Serialization.JsonPropertyName("value")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
//        public Brand Value { get; set; }

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class ResultOfEntityCreatedCommandResult : Result
//    {

//        [System.Text.Json.Serialization.JsonPropertyName("value")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
//        public EntityCreatedCommandResult Value { get; set; }

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class EntityCreatedCommandResult
//    {

//        [System.Text.Json.Serialization.JsonPropertyName("entityId")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
//        public string EntityId { get; set; }

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class ValidationProblemDetails : HttpValidationProblemDetails
//    {

//        [System.Text.Json.Serialization.JsonPropertyName("errors")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
//        public System.Collections.Generic.IDictionary<string, System.Collections.Generic.ICollection<string>> Errors { get; set; }

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class HttpValidationProblemDetails : ProblemDetails
//    {

//        [System.Text.Json.Serialization.JsonPropertyName("errors")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
//        public System.Collections.Generic.IDictionary<string, System.Collections.Generic.ICollection<string>> Errors { get; set; }

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class ResultOfEntityUpdatedCommandResult : Result
//    {

//        [System.Text.Json.Serialization.JsonPropertyName("value")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
//        public EntityUpdatedCommandResult Value { get; set; }

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class EntityUpdatedCommandResult
//    {

//        [System.Text.Json.Serialization.JsonPropertyName("entityId")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
//        public string EntityId { get; set; }

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class ResultOfEntityDeletedCommandResult : Result
//    {

//        [System.Text.Json.Serialization.JsonPropertyName("value")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
//        public EntityDeletedCommandResult Value { get; set; }

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class EntityDeletedCommandResult
//    {

//        [System.Text.Json.Serialization.JsonPropertyName("entityId")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
//        public string EntityId { get; set; }

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class ResultOfString : Result
//    {

//        [System.Text.Json.Serialization.JsonPropertyName("value")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
//        public string Value { get; set; }

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class ResultOfInteger : Result
//    {

//        [System.Text.Json.Serialization.JsonPropertyName("value")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
//        public int Value { get; set; }

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class UploadRequestModel
//    {

//        [System.Text.Json.Serialization.JsonPropertyName("fileName")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
//        public string FileName { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("extension")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
//        public string Extension { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("type")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
//        public string Type { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("data")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
//        public byte[] Data { get; set; }

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class Result2
//    {

//        [System.Text.Json.Serialization.JsonPropertyName("messages")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
//        public System.Collections.Generic.ICollection<string> Messages { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("succeeded")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
//        public bool Succeeded { get; set; }

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class PagedResultOfProduct : ResultOfIEnumerableOfProduct
//    {

//        [System.Text.Json.Serialization.JsonPropertyName("currentPage")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
//        public int CurrentPage { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("totalPages")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
//        public int TotalPages { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("totalCount")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
//        public long TotalCount { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("pageSize")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
//        public int PageSize { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("hasPreviousPage")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
//        public bool HasPreviousPage { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("hasNextPage")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
//        public bool HasNextPage { get; set; }

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class ResultOfIEnumerableOfProduct : Result
//    {

//        [System.Text.Json.Serialization.JsonPropertyName("value")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
//        public System.Collections.Generic.ICollection<Product> Value { get; set; }

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class Product : AggregateRootOfGuid
//    {

//        [System.Text.Json.Serialization.JsonPropertyName("name")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
//        public string Name { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("description")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
//        public string Description { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("keywords")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
//        public System.Collections.Generic.ICollection<string> Keywords { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("pictureSvg")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
//        public string PictureSvg { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("pictureFileName")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
//        public string PictureFileName { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("pictureUri")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
//        public string PictureUri { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("sku")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
//        public string Sku { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("barcode")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
//        public string Barcode { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("size")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
//        public string Size { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("rating")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
//        public int Rating { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("price")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
//        public decimal Price { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("typeId")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
//        public System.Guid TypeId { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("type")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
//        public ProductType Type { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("brandId")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
//        public System.Guid BrandId { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("brand")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
//        public Brand Brand { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("auditState")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
//        public AuditState AuditState { get; set; }

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class ProductType : EntityOfGuid
//    {

//        [System.Text.Json.Serialization.JsonPropertyName("name")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
//        public string Name { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("description")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
//        public string Description { get; set; }

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class ResultOfProduct : Result
//    {

//        [System.Text.Json.Serialization.JsonPropertyName("value")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
//        public Product Value { get; set; }

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class PagedResultOfProductType : ResultOfIEnumerableOfProductType
//    {

//        [System.Text.Json.Serialization.JsonPropertyName("currentPage")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
//        public int CurrentPage { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("totalPages")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
//        public int TotalPages { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("totalCount")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
//        public long TotalCount { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("pageSize")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
//        public int PageSize { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("hasPreviousPage")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
//        public bool HasPreviousPage { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("hasNextPage")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
//        public bool HasNextPage { get; set; }

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class ResultOfIEnumerableOfProductType : Result
//    {

//        [System.Text.Json.Serialization.JsonPropertyName("value")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
//        public System.Collections.Generic.ICollection<ProductType> Value { get; set; }

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class Result3
//    {

//        [System.Text.Json.Serialization.JsonPropertyName("messages")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
//        public System.Collections.Generic.ICollection<string> Messages { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("succeeded")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
//        public bool Succeeded { get; set; }

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class UpdateProfileRequest
//    {

//        [System.Text.Json.Serialization.JsonPropertyName("firstName")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
//        [System.ComponentModel.DataAnnotations.Required]
//        public string FirstName { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("lastName")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
//        [System.ComponentModel.DataAnnotations.Required]
//        public string LastName { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("phoneNumber")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
//        public string PhoneNumber { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("email")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
//        public string Email { get; set; }

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class ChangePasswordRequest
//    {

//        [System.Text.Json.Serialization.JsonPropertyName("password")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
//        [System.ComponentModel.DataAnnotations.Required]
//        public string Password { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("newPassword")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
//        [System.ComponentModel.DataAnnotations.Required]
//        public string NewPassword { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("confirmNewPassword")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
//        [System.ComponentModel.DataAnnotations.Required]
//        public string ConfirmNewPassword { get; set; }

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class UpdateProfilePictureRequest
//    {

//        [System.Text.Json.Serialization.JsonPropertyName("fileName")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
//        public string FileName { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("extension")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
//        public string Extension { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("data")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
//        public byte[] Data { get; set; }

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class ResultOfIEnumerableOfRoleClaimResponse : Result
//    {

//        [System.Text.Json.Serialization.JsonPropertyName("value")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
//        public System.Collections.Generic.ICollection<RoleClaimResponse> Value { get; set; }

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class RoleClaimResponse
//    {

//        [System.Text.Json.Serialization.JsonPropertyName("id")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
//        public int Id { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("roleId")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
//        public string RoleId { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("type")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
//        public string Type { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("value")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
//        public string Value { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("description")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
//        public string Description { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("module")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
//        public string Module { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("group")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
//        public string Group { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("selected")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
//        public bool Selected { get; set; }

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class RoleClaimRequest
//    {

//        [System.Text.Json.Serialization.JsonPropertyName("id")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
//        public int Id { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("roleId")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
//        public string RoleId { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("type")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
//        public string Type { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("value")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
//        public string Value { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("description")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
//        public string Description { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("group")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
//        public string Group { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("selected")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
//        public bool Selected { get; set; }

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class ResultOfIEnumerableOfRoleResponse : Result
//    {

//        [System.Text.Json.Serialization.JsonPropertyName("value")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
//        public System.Collections.Generic.ICollection<RoleResponse> Value { get; set; }

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class RoleResponse
//    {

//        [System.Text.Json.Serialization.JsonPropertyName("id")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
//        public string Id { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("name")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
//        [System.ComponentModel.DataAnnotations.Required]
//        public string Name { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("description")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
//        public string Description { get; set; }

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class RoleRequest
//    {

//        [System.Text.Json.Serialization.JsonPropertyName("id")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
//        public string Id { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("name")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
//        [System.ComponentModel.DataAnnotations.Required]
//        public string Name { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("description")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
//        public string Description { get; set; }

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class ResultOfPermissionResponse : Result
//    {

//        [System.Text.Json.Serialization.JsonPropertyName("value")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
//        public PermissionResponse Value { get; set; }

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class PermissionResponse
//    {

//        [System.Text.Json.Serialization.JsonPropertyName("roleId")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
//        public string RoleId { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("roleName")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
//        public string RoleName { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("roleClaims")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
//        public System.Collections.Generic.ICollection<RoleClaimResponse> RoleClaims { get; set; }

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class PermissionRequest
//    {

//        [System.Text.Json.Serialization.JsonPropertyName("roleId")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
//        public string RoleId { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("roleClaims")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
//        public System.Collections.Generic.ICollection<RoleClaimRequest> RoleClaims { get; set; }

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class ResultOfTokenResponse : Result
//    {

//        [System.Text.Json.Serialization.JsonPropertyName("value")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
//        public TokenResponse Value { get; set; }

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class TokenResponse
//    {

//        [System.Text.Json.Serialization.JsonPropertyName("token")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
//        public string Token { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("refreshToken")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
//        public string RefreshToken { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("userImageURL")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
//        public string UserImageURL { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("refreshTokenExpiryTime")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
//        public System.DateTimeOffset RefreshTokenExpiryTime { get; set; }

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class TokenRequest
//    {

//        [System.Text.Json.Serialization.JsonPropertyName("email")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
//        public string Email { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("password")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
//        public string Password { get; set; }

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class RefreshTokenRequest
//    {

//        [System.Text.Json.Serialization.JsonPropertyName("token")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
//        public string Token { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("refreshToken")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
//        public string RefreshToken { get; set; }

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class ResultOfIEnumerableOfUserResponse : Result
//    {

//        [System.Text.Json.Serialization.JsonPropertyName("value")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
//        public System.Collections.Generic.ICollection<UserResponse> Value { get; set; }

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class UserResponse
//    {

//        [System.Text.Json.Serialization.JsonPropertyName("id")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
//        public string Id { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("userName")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
//        public string UserName { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("firstName")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
//        public string FirstName { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("lastName")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
//        public string LastName { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("email")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
//        public string Email { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("isActive")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
//        public bool IsActive { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("emailConfirmed")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
//        public bool EmailConfirmed { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("phoneNumber")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
//        public string PhoneNumber { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("profilePictureDataUrl")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
//        public string ProfilePictureDataUrl { get; set; }

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class ResultOfUserResponse : Result
//    {

//        [System.Text.Json.Serialization.JsonPropertyName("value")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
//        public UserResponse Value { get; set; }

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class ResultOfUserRolesResponse : Result
//    {

//        [System.Text.Json.Serialization.JsonPropertyName("value")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
//        public UserRolesResponse Value { get; set; }

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class UserRolesResponse
//    {

//        [System.Text.Json.Serialization.JsonPropertyName("userRoles")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
//        public System.Collections.Generic.ICollection<UserRoleModel> UserRoles { get; set; }

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class UserRoleModel
//    {

//        [System.Text.Json.Serialization.JsonPropertyName("roleName")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
//        public string RoleName { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("roleDescription")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
//        public string RoleDescription { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("selected")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
//        public bool Selected { get; set; }

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class UpdateUserRolesRequest
//    {

//        [System.Text.Json.Serialization.JsonPropertyName("userId")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
//        public string UserId { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("userRoles")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
//        public System.Collections.Generic.ICollection<UserRoleModel> UserRoles { get; set; }

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class RegisterRequest
//    {

//        [System.Text.Json.Serialization.JsonPropertyName("firstName")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
//        [System.ComponentModel.DataAnnotations.Required]
//        public string FirstName { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("lastName")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
//        [System.ComponentModel.DataAnnotations.Required]
//        public string LastName { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("email")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
//        [System.ComponentModel.DataAnnotations.Required]
//        public string Email { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("userName")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
//        [System.ComponentModel.DataAnnotations.Required]
//        [System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength = 6)]
//        public string UserName { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("password")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
//        [System.ComponentModel.DataAnnotations.Required]
//        [System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength = 6)]
//        public string Password { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("confirmPassword")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
//        [System.ComponentModel.DataAnnotations.Required]
//        public string ConfirmPassword { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("phoneNumber")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
//        public string PhoneNumber { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("activateUser")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
//        public bool ActivateUser { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("autoConfirmEmail")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
//        public bool AutoConfirmEmail { get; set; }

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class ToggleUserStatusRequest
//    {

//        [System.Text.Json.Serialization.JsonPropertyName("activateUser")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
//        public bool ActivateUser { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("userId")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
//        public string UserId { get; set; }

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class ForgotPasswordRequest
//    {

//        [System.Text.Json.Serialization.JsonPropertyName("email")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
//        [System.ComponentModel.DataAnnotations.Required]
//        public string Email { get; set; }

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class ResetPasswordRequest
//    {

//        [System.Text.Json.Serialization.JsonPropertyName("email")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
//        [System.ComponentModel.DataAnnotations.Required]
//        public string Email { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("password")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
//        [System.ComponentModel.DataAnnotations.Required]
//        public string Password { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("confirmPassword")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
//        [System.ComponentModel.DataAnnotations.Required]
//        public string ConfirmPassword { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("token")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
//        [System.ComponentModel.DataAnnotations.Required]
//        public string Token { get; set; }

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class Result4
//    {

//        [System.Text.Json.Serialization.JsonPropertyName("messages")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
//        public System.Collections.Generic.ICollection<string> Messages { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("succeeded")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
//        public bool Succeeded { get; set; }

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class PagedResultOfStock : ResultOfIEnumerableOfStock
//    {

//        [System.Text.Json.Serialization.JsonPropertyName("currentPage")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
//        public int CurrentPage { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("totalPages")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
//        public int TotalPages { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("totalCount")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
//        public long TotalCount { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("pageSize")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
//        public int PageSize { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("hasPreviousPage")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
//        public bool HasPreviousPage { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("hasNextPage")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
//        public bool HasNextPage { get; set; }

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class ResultOfIEnumerableOfStock : Result
//    {

//        [System.Text.Json.Serialization.JsonPropertyName("value")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
//        public System.Collections.Generic.ICollection<Stock> Value { get; set; }

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class Stock : AggregateRootOfGuid
//    {

//        [System.Text.Json.Serialization.JsonPropertyName("sku")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
//        public string Sku { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("availableQuantity")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
//        public int AvailableQuantity { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("restockQuantity")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
//        public int RestockQuantity { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("restockThreshold")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
//        public int RestockThreshold { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("maxStockThreshold")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
//        public int MaxStockThreshold { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("onRestock")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
//        public bool OnRestock { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("state")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
//        public State State { get; set; }

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class State
//    {

//        [System.Text.Json.Serialization.JsonPropertyName("createdBy")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
//        public string CreatedBy { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("createdDate")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
//        public System.DateTimeOffset CreatedDate { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("createdDescription")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
//        public string CreatedDescription { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("updatedBy")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
//        public string UpdatedBy { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("updatedDate")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
//        public System.DateTimeOffset? UpdatedDate { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("updatedDescription")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
//        public string UpdatedDescription { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("updatedReasons")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
//        public System.Collections.Generic.ICollection<string> UpdatedReasons { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("deactivated")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
//        public bool? Deactivated { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("deactivatedReasons")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
//        public System.Collections.Generic.ICollection<string> DeactivatedReasons { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("deactivatedBy")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
//        public string DeactivatedBy { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("deactivatedDate")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
//        public System.DateTimeOffset? DeactivatedDate { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("deactivatedDescription")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
//        public string DeactivatedDescription { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("deleted")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
//        public bool? Deleted { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("deletedBy")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
//        public string DeletedBy { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("deletedDate")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
//        public System.DateTimeOffset? DeletedDate { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("deletedReason")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
//        public string DeletedReason { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("deletedDescription")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
//        public string DeletedDescription { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("lastActionDate")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
//        public System.DateTimeOffset? LastActionDate { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("isDeactivated")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
//        public bool IsDeactivated { get; set; }

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class ResultOfStock : Result
//    {

//        [System.Text.Json.Serialization.JsonPropertyName("value")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
//        public Stock Value { get; set; }

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class Result5
//    {

//        [System.Text.Json.Serialization.JsonPropertyName("messages")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
//        public System.Collections.Generic.ICollection<string> Messages { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("succeeded")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
//        public bool Succeeded { get; set; }

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class Result6
//    {

//        [System.Text.Json.Serialization.JsonPropertyName("messages")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
//        public System.Collections.Generic.ICollection<string> Messages { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("succeeded")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
//        public bool Succeeded { get; set; }

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class ResultOfCartDto : Result6
//    {

//        [System.Text.Json.Serialization.JsonPropertyName("data")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
//        public CartDto Data { get; set; }

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class CartDto
//    {

//        [System.Text.Json.Serialization.JsonPropertyName("id")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
//        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
//        public System.Guid Id { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("identity")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
//        public string Identity { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("totalPrice")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
//        public decimal TotalPrice { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("items")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
//        public System.Collections.Generic.ICollection<CartItemDto> Items { get; set; }

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class CartItemDto
//    {

//        [System.Text.Json.Serialization.JsonPropertyName("id")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
//        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
//        public System.Guid Id { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("sku")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
//        public string Sku { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("name")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
//        public string Name { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("quantity")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
//        public int Quantity { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("unitPrice")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
//        public decimal UnitPrice { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("totalPrice")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
//        public decimal TotalPrice { get; set; }

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class FileResponse : System.IDisposable
//    {
//        private System.IDisposable _client;
//        private System.IDisposable _response;

//        public int StatusCode { get; private set; }

//        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

//        public System.IO.Stream Stream { get; private set; }

//        public bool IsPartial
//        {
//            get { return StatusCode == 206; }
//        }

//        public FileResponse(int statusCode, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.IO.Stream stream, System.IDisposable client, System.IDisposable response)
//        {
//            StatusCode = statusCode;
//            Headers = headers;
//            Stream = stream;
//            _client = client;
//            _response = response;
//        }

//        public void Dispose()
//        {
//            Stream.Dispose();
//            if (_response != null)
//                _response.Dispose();
//            if (_client != null)
//                _client.Dispose();
//        }
//    }

//    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class SwaggerResponse
//    {
//        public int StatusCode { get; private set; }

//        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

//        public SwaggerResponse(int statusCode, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers)
//        {
//            StatusCode = statusCode;
//            Headers = headers;
//        }
//    }

//    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class SwaggerResponse<TResult> : SwaggerResponse
//    {
//        public TResult Result { get; private set; }

//        public SwaggerResponse(int statusCode, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result)
//            : base(statusCode, headers)
//        {
//            Result = result;
//        }
//    }


//    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class ApiException : System.Exception
//    {
//        public int StatusCode { get; private set; }

//        public string Response { get; private set; }

//        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

//        public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception innerException)
//            : base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + ((response == null) ? "(null)" : response.Substring(0, response.Length >= 512 ? 512 : response.Length)), innerException)
//        {
//            StatusCode = statusCode;
//            Response = response;
//            Headers = headers;
//        }

//        public override string ToString()
//        {
//            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
//        }
//    }

//    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class ApiException<TResult> : ApiException
//    {
//        public TResult Result { get; private set; }

//        public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception innerException)
//            : base(message, statusCode, response, headers, innerException)
//        {
//            Result = result;
//        }
//    }

//}

//#pragma warning restore  108
//#pragma warning restore  114
//#pragma warning restore  472
//#pragma warning restore  612
//#pragma warning restore 1573
//#pragma warning restore 1591
//#pragma warning restore 8073
//#pragma warning restore 3016
//#pragma warning restore 8603