#######################################################################################################
# TEST
#
parameters:
  - name: buildConfiguration
    type: string
    default: 'Release'
  - name: testProjects
    type: string
    default: '$(Build.SourcesDirectory)/tests/*Tests/*.csproj'
  # - name: testPath
  #   type: string
  #   default: '$(Build.SourcesDirectory)/tests'
  #- name: testCoverageReportPath
  #  type: string
  #  default: '$(Build.SourcesDirectory)/CodeCoverage'

jobs:
  - job: test
    displayName: Test job
    pool:
      vmImage: 'ubuntu-latest'
    # variables:
      # system.debug: true
    steps:
    - bash: |
        docker-compose up -d
      displayName: Docker start containers

    - bash: |
        docker ps -a
      displayName: Docker list containers
      condition: succeeded()

    - task: UseDotNet@2
      displayName: Use .NET SDK
      condition: succeeded()
      inputs:
        version: '8.0.x'

    - bash: |
        export ASPNETCORE_ENVIRONMENT=Development
        whereis dotnet
        /usr/bin/dotnet --info
      displayName: Inspect environment
      condition: succeeded()

    - task: DotNetCoreCLI@2 # https://docs.microsoft.com/en-us/azure/devops/pipelines/tasks/build/dotnet-core?view=azure-devops#restore-nuget-packages
      displayName: Restore project dependencies
      condition: succeeded()
      inputs:
        command: restore
        projects: '**/*.csproj'
        verbosityRestore: Normal
        feedsToUse: 'config'
        nugetConfigPath: './nuget.config'

    - task: DotNetCoreCLI@2
      displayName: Run test projects
      condition: succeeded()
      inputs:
        command: test
        projects: '${{ parameters.testProjects }}'
        arguments: '--configuration ${{ parameters.buildConfiguration }} --no-restore --collect:"XPlat Code Coverage"' # --filter "Category=UnitTest&Category!=IntegrationTest"
        nobuild: true

    # - bash: |
    #     dotnet tool install -g dotnet-reportgenerator-globaltool --version 4.8.4
    #     $HOME/.dotnet/tools/reportgenerator -reports${{ parameters.testPath }}/**/coverage.cobertura.xml -targetdir:${{ parameters.testCoverageReportPath }} -reporttypes:Cobertura
    #   displayName: Create coverage report

    # - task: PublishCodeCoverageResults@1
    #   displayName: Publish coverage results
    #   continueOnError: true
    #   inputs:
    #     codeCoverageTool: 'Cobertura'
    #     summaryFileLocation: '${{ parameters.testCoverageReportPath }}/Cobertura.xml'
    #     reportDirectory: '${{ parameters.testCoverageReportPath }}'
    #     failIfCoverageEmpty: true

    - bash: |
        docker-compose stop
        docker container stop $(docker container ls -aq)
        docker container rm $(docker container ls -aq)
      displayName: Docker cleanup
      condition: succeeded()
      continueOnError: 'true'

#- stage: Cleanup
#  displayName: Cleanup stage
#  jobs:
#    - job: Cleanup
#      displayName: Cleanup job
#      steps:
#      - task: DeleteFiles@1
#        continueOnError: true
#        inputs:
#          SourceFolder: '$(Agent.BuildDirectory)'
#          Contents: '**/*'
#          RemoveSourceFolder: true