#######################################################################################################
# DEPLOY
#
parameters:
  - name: azureSubscription
    type: string
  - name: environment
    type: string
    default: 'dev'
  - name: slotName
    type: string
    default: 'staging'

jobs:
  - deployment: deploy
    displayName: Deploy job (${{ parameters.environment }})
    environment: '${{ parameters.environment }}'
    pool:
      vmImage: 'ubuntu-latest'
    # variables:
    #   system.debug: true
    strategy:
      runOnce:
        deploy:
          steps:
          - bash: |
              echo "##vso[task.setvariable variable=Pipeline.Params.ResourceGroup;]$(jq .parameters.resourceGroup.value ./infra/main.parameters.${{ parameters.environment }}.json)"
              echo "##vso[task.setvariable variable=Pipeline.Params.Location;]$(jq .parameters.location.value ./infra/main.parameters.${{ parameters.environment }}.json)"
              echo "##vso[task.setvariable variable=Pipeline.Params.ProjectName;]$(jq .parameters.projectName.value ./infra/main.parameters.${{ parameters.environment }}.json)"
            displayName: Set Pipeline variables
            workingDirectory: $(Pipeline.Workspace)/artifacts

          - powershell: |
              Get-ChildItem Env:
            displayName: Show environment variables

          - task: AzureCLI@2 # https://learn.microsoft.com/en-us/azure/devops/pipelines/tasks/deploy/azure-cli?view=azure-devops
            name: ProvisionInfra
            displayName: Provision infrastructure
            condition: succeeded()
            inputs:
              scriptType: pscore
              scriptLocation: scriptPath
              azureSubscription: ${{ parameters.azureSubscription }} # =service connection name
              scriptPath: $(Pipeline.Workspace)/artifacts/infra/provision.ps1
              arguments: >
                -resourceGroup $(Pipeline.Params.ResourceGroup)
                -location $(Pipeline.Params.Location)
                -environment ${{ parameters.environment }}
                -version $(Build.BuildNumber)
                -bicepFile $(Pipeline.Workspace)/artifacts/infra/main.bicep
                -bicepParametersFile $(Pipeline.Workspace)/artifacts/infra/main.parameters.${{ parameters.environment }}.json

          - task: AzureCLI@2 # https://learn.microsoft.com/en-us/azure/devops/pipelines/tasks/deploy/azure-cli?view=azure-devops
            name: DeployPresentationWeb
            displayName: Deploy Presentation.Web
            condition: succeeded()
            timeoutInMinutes: 10
            inputs: # https://learn.microsoft.com/en-us/cli/azure/webapp/deployment/source?view=azure-cli-latest#az-webapp-deployment-source-config-zip
              scriptType: pscore
              scriptLocation: inlineScript
              azureSubscription: ${{ parameters.azureSubscription }} # =service connection name
              inlineScript: |
                az webapp deployment source config-zip --src $env:PIPELINE_WORKSPACE/artifacts/Presentation.Web.zip --resource-group $env:PIPELINE_PARAMS_RESOURCEGROUP --name $env:PROVISIONINFRA_BICEPOUTPUT_APPSERVICENAME

          # - task: AzureWebApp@1 # https://learn.microsoft.com/en-us/azure/devops/pipelines/tasks/deploy/azure-rm-web-app?view=azure-devops
          #   name: DeployPresentationWeb
          #   displayName: Deploy Presentation.Web
          #   condition: succeeded()
          #   timeoutInMinutes: 10
          #   inputs:
          #     azureSubscription: ${{ parameters.azureSubscription }} # =service connection name
          #     appType: webAppLinux
          #     appName: $(ProvisionInfra.BICEPOUTPUT_APPSERVICENAME) # referencing the BICEPOUTPUT_APPSERVICENAME output variable from the 'Provision infrastructure' task above
          #     package: '$(Pipeline.Workspace)/artifacts/**/Presentation.Web.zip'
          #     deploymentMethod: runFromPackage # zip package is copied and mounted from ./data/SitePackages
          #     # deploymentMethod: 'auto'
          #     #${{ if eq(parameters.environment, 'prd') }}:
          #     #  deployToSlotOrASE: true
          #     #  resourceGroupName: '$(Pipeline.Params.ResourceGroupName)'
          #     #  slotName: '${{ parameters.slotName }}'

          - powershell: |
              # TODO: improve with retry/timeout https://stackoverflow.com/a/63037309/1758814
              $requestUrl = "$env:PROVISIONINFRA_BICEPOUTPUT_APPSERVICEURL/healthz"
              $requestHeader = @{
                "Accept" = "application/json"
              }
              $contentType = "application/json;charset=utf-8"
              Write-Host $requestUrl
              Start-Sleep 30
              $response = Invoke-WebRequest -Uri $requestUrl -Method "GET" -Headers $requestHeader -ContentType $contentType
              $response.Content #Display the responce body
            displayName: Check Presentation.Web health
            condition: succeeded()

          # - task: AzureCLI@2 # https://learn.microsoft.com/en-us/azure/devops/pipelines/tasks/deploy/azure-cli?view=azure-devops
          #   displayName: Post provision infrastructure (${{ parameters.resourceGroupName }} | ${{ parameters.environment }} | ${{ parameters.projectName }})
          #   inputs:
          #     azureSubscription: '${{ parameters.azureSubscription }}'
          #     scriptType: pscore
          #     scriptLocation: inlineScript
          #     addSpnToEnvironment: true
          #     inlineScript: |
          #       az account show
          #       az deployment group create -f $env:PIPELINE_WORKSPACE/artifacts/azure-provision-post.bicep -g ${{ parameters.resourceGroupName }} --verbose --parameters environment=${{ parameters.environment }} projectName=${{ parameters.projectName }}